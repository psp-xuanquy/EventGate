// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240702135548_DeleteICollectionInHistories")]
    partial class DeleteICollectionInHistories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatRoomID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "d0093d62-0b52-4504-80dd-bbec3cbaeb93",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1463),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1491),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a2f93ff8-cb59-4ba6-9831-b270cedabe11",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1495),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1497),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "dce81917-26f3-4c12-ab0f-f6aba1d43877",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1499),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1500),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "782431a0-d756-42d0-a515-6eba4ddc9f68",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1502),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1513),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "64ec255e-a77f-4715-a2c3-563317635044",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1514),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1523),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "058ef2e1-7354-44a3-abde-eaffabbdaf43",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1526),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1527),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c0ee9ea8-0798-46ad-98c3-b2516fc073a7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1529),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1530),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8827023a-7dfe-4872-8b14-84db88b6f395",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1532),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1536),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a79eaab5-a7bd-4990-a98a-a32f4736ee3d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1537),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1539),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "cc8867e2-3839-40af-a860-cbd39dcc707d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1542),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1543),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0aacf986-fa06-4e73-9cfa-72f751e7ce41",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1544),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1546),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "03c555ec-1cc3-421f-a2b9-973cb7117d62",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1547),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1550),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "02931151-9247-45f3-8a12-453d03e5d4ff",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1552),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1553),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "864eb547-ec5e-4b72-8713-ce0d9126ae69",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1554),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1556),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "29bdc547-f157-47fe-ba09-04cd0dfbc613",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1557),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1558),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f2f4f578-b39f-4db3-b07d-490c5bd7db84",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1559),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1563),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "b07bdfcb-c222-4208-b874-720d1019adb4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1564),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1565),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3b2a7367-cb5f-40f6-86a3-9b277f020f03",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1568),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1570),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "bef3a3dc-15a2-4565-93f2-5159f2b6a757",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1572),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1573),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "aaf910e3-51a5-408e-9ff2-f3458739c7d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1574),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1577),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "11b703e9-5dd7-40ae-b693-bb9637e34f18",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1579),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1580),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c7bbe68e-c8b8-48d4-926e-3d4d9b823b15",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1581),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1583),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9289fcd2-476f-4401-b8f5-2a3e03378d60",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1584),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1585),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "447b15fd-b822-4b9d-8a23-602c36c7faa2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1587),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1590),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3253ae07-a18c-4196-be3e-cd6d5601b489",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1591),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1593),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0f1320e5-083d-4316-95e9-528187044a58",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1594),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1595),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f2235e23-f2c5-4107-8e4f-233083fc6e0e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1596),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1598),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1582a39c-4fa4-4aa2-9c8d-f40e56736f5a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1599),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1602),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fef7ce75-8d7e-48d0-80f4-1fe892d53e04",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1603),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1605),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "82f13d98-5014-4d9b-b291-d588ecc46642",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1612),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1613),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ffd3a3cf-8744-4453-a634-e3325e20427b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1615),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1617),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "64159dbd-24d9-402f-bccb-209c9af3e445",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1618),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1621),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5d54a3e0-bd55-418f-beb8-42d52f284c55",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1623),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1624),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2d758b46-d8dd-43e2-9cf2-10d4de5dbf2c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1626),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1627),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "712a42be-da83-42c9-ab00-e0175f6df09b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1629),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1630),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2f90821d-10c3-4ad7-97e1-10695fe96fd7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1631),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1635),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5d615d65-2b21-4097-a2cf-d62ce297a71e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1636),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1637),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "51cb1566-b164-4649-bd92-680c8cafdd6d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1639),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1640),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "be061363-12b1-4097-aba2-f232007afd72",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1641),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1643),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "184768e1-901c-4774-8721-a832401c83af",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1644),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1647),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "23f6684e-01ba-40f9-83e3-41a33ebd01fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1648),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1650),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4dbe91dc-f608-47eb-8742-636a98793c63",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1651),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1653),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d6a3a9d2-64ed-4843-bc63-e9bd872f31e9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1654),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1656),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "9fdd0ca8-d271-4296-87a9-477041b86c97",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1657),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1660),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "9e2a1942-8759-46ac-b3c8-b8464cb95d37",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1662),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1663),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "147e0b2d-5c23-4422-81ba-a461b26a61bb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1664),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1666),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "683d67f6-1651-4984-8049-07d330c92bd9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1667),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1669),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "dd23a3b9-6307-4778-8ed7-561c1e94bb2d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1670),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1673),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "954f4cee-52ba-40e4-a2c5-0d8d33511e2a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1674),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1676),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e10ea757-1a09-404d-bca5-65095e4d5aa0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1677),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1678),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "59fb5cd8-167e-4c17-aecd-4fd388855730",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1680),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1681),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e8af5f40-19da-461a-8f27-3c41caad6a57",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1682),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1686),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b8c1d3bb-64df-495e-b3fd-7aa52f57af8a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1687),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1688),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "36e13b0a-7d3d-4ce3-97d0-66a1ce85091f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1689),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1696),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d3ae904c-f2d5-4ac5-b0a8-291778259fbf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1698),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1699),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "53f8734a-0d68-4278-b83c-88d2bf37fc7f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1701),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1705),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0bb35081-4d30-4e75-a78c-b8ca274bd3b4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1706),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1708),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6fdc82f9-4cef-414a-8bc2-8271e315a953",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1709),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1710),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d8d60bc7-befb-49a5-a702-1bf6f0f25700",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1711),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1713),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "68ca4cf4-fe8b-4ae2-8f2d-751f55971d84",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1714),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1717),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "adb887a5-91a8-422b-a633-73e4bd6ba16a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1719),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1720),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2049d974-9b92-403c-bce8-34709e903fdb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1722),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1723),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "732fcd28-ecf8-4619-a559-84d39bc5f6d3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1724),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1725),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1e7bde05-16fe-49d5-b465-11999cfdb0a3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1727),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1730),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "77aa5f5a-3aa0-4890-8dc0-910b4303297f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1731),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1733),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0275f2df-d290-427a-9690-2aa8bf85389b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1735),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1737),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a968b0ff-af12-48af-a3b9-df240a6910ca",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1738),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1740),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3b163cfc-b429-4515-a812-19d0df8bbc53",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1741),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1744),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "efcd4064-8fb6-4b04-9530-0ec467ce32f2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1745),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1747),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b46bd294-ad7e-4619-ab86-e9081f1bc35d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1748),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1749),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "06772198-a7fb-4263-80b1-36003b7fbfeb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1751),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1752),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "7d0ca39f-09f6-443c-b2b2-eb33ee09ec4c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1754),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1757),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "85ac56a1-ff15-49eb-adce-c06d16da29d3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1759),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1760),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e6e4a897-d649-4f58-a911-0997dc675131",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1761),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1763),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "322c5822-6a0d-4726-b445-5171a394b7fd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1764),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1765),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "dd928a8d-f29a-4ace-8c33-4e2da8f3b5fd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1767),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1770),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "6ea6f8b8-6a3e-450c-a225-f82ca4c7f8e8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1771),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1778),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "9f2094e5-8c45-4fc6-8fbb-53569303baef",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1779),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1780),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "870ee244-e5f5-4f4b-8bb7-b53b2a1d250f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1782),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1783),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "969813f6-bcb7-4683-bbda-2b99f7642d2a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1784),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1788),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "48e35db9-2dfb-4cc7-aa69-31cccc68db30",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1789),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1790),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ba17e7ce-71f8-410f-8416-09d2bd15c33a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1792),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1793),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "95335a50-4112-4c5d-be87-8006bd9c1ff7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1794),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1796),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6d147a60-3564-424f-93e2-a15ec80ad488",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1797),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1800),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ba5cfbc1-5533-42a5-936d-937311170086",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1802),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1803),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "08df2cbb-26b7-4962-ab0e-2b474b4df380",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1804),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1805),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4b6b68ac-8997-43eb-b347-4461671c1283",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1807),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1808),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5c5899ec-c69f-43e5-ae49-463693761a4c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1809),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1813),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e1de4dfa-4a27-4084-89f8-9b12532a7197",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1814),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1815),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "84654c69-9c18-466a-bded-c73135409d62",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1816),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 20, 55, 45, 772, DateTimeKind.Local).AddTicks(1818),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventHistoryID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("EventHistoryID1");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", null)
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany()
                        .HasForeignKey("EventHistoryID1");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
