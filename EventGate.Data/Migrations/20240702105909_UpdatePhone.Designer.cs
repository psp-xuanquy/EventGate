// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240702105909_UpdatePhone")]
    partial class UpdatePhone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserId");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "43129838-cc52-467d-a111-9387fb89b96f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(173),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(206),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "235d9ed9-cd6f-45d3-a9eb-f2b03f5457ac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(214),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(216),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e9f49e97-a71f-4ce6-9c09-9d9fcd7aa582",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(218),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(220),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c1b82288-8db0-49be-90f4-7a7982660990",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(231),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(233),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "492ff2b7-3c3b-4116-8cac-c89bfd701eee",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(234),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(236),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9893bf6f-a712-4009-b279-271ff8ca8891",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(240),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(242),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a6206b8a-eb8f-40cf-b2f6-63d2c10d9905",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(244),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(246),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "252851b1-a43b-454c-a233-864f1b9fdb71",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(251),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(253),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "02ac27e3-ae4f-412e-bec6-0a9f4c4724ee",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(254),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(256),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "35376ae6-59b3-45b5-b315-66b32f9dafb6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(259),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(262),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e3194977-6215-4054-9f53-446f5fad3217",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(263),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(265),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5e3652a9-99de-45f0-a822-7a994146b8c3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(269),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(271),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6a443884-57a1-48de-99bd-e1b0f7c3fa22",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(273),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(274),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8bdfa791-c848-4fb2-a6aa-2be7afb4559c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(276),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(277),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "babe38c6-a167-4e6e-b44c-d1dfd7d95ea3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(279),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(281),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "72d7e823-5453-40b0-824d-783d0c942440",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(295),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(297),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "38e46d6a-f943-42d6-ba94-df481e2ca4ab",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(299),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(300),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3e911df5-d3a1-4e5f-ac6f-84cca33a6143",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(304),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(306),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c16e6479-3e09-4f6d-b23a-1874256c10db",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(307),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(309),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fdddf26f-f943-4b49-85c0-4210ff47d45f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(313),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(315),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9a107bcc-803a-4921-b7b2-9a69226ae40a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(316),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(318),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "897308ee-3ce6-4584-b104-dae2dd574e44",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(319),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(321),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4795d3a4-b59e-46c2-a297-6f282b3cb23b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(323),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(325),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d001eeb7-a9ea-403e-8ae6-16d067eebe0a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(329),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(330),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "32522bc3-8199-488a-b963-3b5a67c4ee10",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(332),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(334),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b00382a4-35cf-4c8c-984c-a2a19d84ae3f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(335),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(337),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e462f9cb-744d-4240-96e4-83cee643f2f0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(339),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(340),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "44e1ff1b-e0d7-41c0-8142-a7bdd0a2c3fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(344),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(346),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "23aba1ff-3035-4268-b28e-bab963e41cf6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(348),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(349),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "c911dc7c-52eb-40ab-9c57-5769f6e647d7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(351),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(353),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "3d3b6e44-2faf-45a8-aaf2-8ddff5d3392e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(355),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(357),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "77f5ee7d-319e-4fdc-9696-90994e3a2ab8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(360),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(362),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3c399ece-a869-4f7b-af68-44951e7bac39",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(364),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(365),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "385f648c-24a7-41cf-9b87-179d0e67e03e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(368),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(370),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "245893d1-50c6-4c01-937a-12ce28a26188",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(372),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(373),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "8fff47bd-3561-4657-96ab-24a3feb33c43",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(377),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(379),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f4549727-4a4d-4656-94ab-2ed18f78fa63",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(381),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(383),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "43912389-4150-41e4-b483-4191a6b9f21b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(384),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(386),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "33337670-19a5-4c47-9097-08fed3d1b6a9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(388),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(396),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "706bf600-1e66-425e-adf0-f5bc18f9d259",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(400),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(402),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9c01a5d1-fbd0-473f-9877-3156570849aa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(403),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(405),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "c96ba4e5-d3ad-42b5-a75a-a93c80142643",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(407),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(408),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "aad3c3ca-a6f9-48b5-a634-849762e6fe00",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(410),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(412),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ca0bd3b4-22ba-4877-ada9-cf9730a180b4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(416),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(417),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a2567bba-8828-47f4-8638-21eec1a6a938",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(419),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(421),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "697ddf72-5b63-4672-87aa-858ddbc239c7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(422),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(424),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "fba9eb11-400c-4afa-9082-894250c7c97e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(425),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(427),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a6023649-5e20-47a4-895d-8603d2ddd473",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(431),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(432),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "db948809-adc9-4dcf-b15f-4e9ce957bc57",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(434),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(436),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d6c62ac0-4477-4025-9df8-816cf7a001b9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(437),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(439),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a9c3fe4e-f280-487d-ba6b-f36024def37d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(441),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(442),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2c7c17b0-07a4-4cbc-a9ea-64ec6ce2b7d7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(446),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(447),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "5117fe2c-322e-45cc-b070-d320fa43f48e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(449),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(451),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2e107d86-6532-424c-8f05-b8a97ed257d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(452),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(454),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "658135c3-b1f0-4387-81a6-2c3455291f18",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(456),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(457),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8e84ded3-6f27-49a3-9ec4-495b4e4eee95",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(461),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(463),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "11787294-b209-4557-ab6b-b402e3528e06",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(465),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(466),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8ce33dac-aade-40c8-b810-1440acdac11a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(468),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(470),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "775fda64-28f9-4770-8e0e-5f05ac3396ff",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(471),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(473),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "33564315-86d5-4558-8e32-9b9a5c82738d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(477),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(478),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fa92a2ec-621f-45cd-82cf-742296bc923f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(480),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(482),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1989e0a4-0bd2-4392-8bea-5e128757e664",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(483),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(485),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "292d1cc8-113a-4a1a-bfe4-3a86cdd30340",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(486),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(488),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "eb5ada3a-9c14-4682-9279-3316f811c4d8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(492),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(493),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c61f48cb-d086-46f3-a531-977abe297c04",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(495),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(496),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "80256020-2059-494b-a998-37f66a1d3669",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(505),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(506),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5d68076a-7f06-48ef-a04f-7b333ca8d77f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(508),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(510),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "92a672f1-0f66-4c04-bda3-c0f515c1af67",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(514),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(516),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "fc78adfc-9103-4256-b4e8-4f5295d51f6d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(517),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(519),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "95ba8ebb-c097-41b2-9da3-1e5007769b45",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(520),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(522),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9868a4a5-d7e5-414d-9dee-f89e3ace1fe2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(524),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(525),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "52e8a698-8adc-47be-8138-9cae5982fc54",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(529),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(530),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "899d659e-2018-45f0-89a7-4befa488dde3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(532),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(534),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ca5ea23a-ee0a-4f1f-9db5-27d6650209d3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(535),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(537),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f09f216d-7790-49ea-af40-6aff889462f5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(538),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(540),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "99fe54c8-b181-4049-8e79-6205ff86cec8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(544),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(545),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "cc2920b0-cccb-4e60-8834-d54a8e14bfa9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(547),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(549),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5fa6ec5c-48ba-45c6-bbe3-98a995f1b5cb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(550),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(552),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e7aea8f6-37e5-4e6a-b9eb-13af1a9c4b1b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(554),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(555),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "70fdecc5-9a52-4399-a18f-0257f10d2dc7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(559),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(561),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "855e43a4-0b7a-475f-a695-7628a24d68dc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(562),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(564),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a621271c-12e5-458d-817d-1888d06138f2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(566),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(567),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2d3242b3-fa7c-4b66-81b1-620582106d39",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(569),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(570),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4d8f504d-ec15-41ae-b646-f557943f8446",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(574),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(576),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3b269a76-5a98-4258-aebe-46ed585da65f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(577),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(579),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5543e62e-5a53-4621-b256-7d29bfe7f519",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(580),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(582),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7299553d-79bf-469f-b6e7-04df30ffc5b1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(584),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(585),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "56d86296-227b-40d2-970e-b98aecf83850",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(589),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(591),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5195b724-b7bf-4ca2-85e9-05d6db77a8a7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(598),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(600),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f3bf480c-cd9f-4b39-aaa6-c3c884ca0259",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(602),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 17, 59, 8, 319, DateTimeKind.Local).AddTicks(604),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventHistoryID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("EventHistoryID1");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", null)
                        .WithMany("ChatHistories")
                        .HasForeignKey("ChatID");

                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany("ChatHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", null)
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany()
                        .HasForeignKey("EventHistoryID1");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany("UserHistories")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatHistories");

                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("EventHistories");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ChatHistories");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
