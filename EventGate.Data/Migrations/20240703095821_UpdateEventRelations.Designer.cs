// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240703095821_UpdateEventRelations")]
    partial class UpdateEventRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "d3a528b1-d688-4061-a7b0-922fdaf9f193",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4173),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4194),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d67d38b3-f631-4804-81c0-637f24f97de3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4198),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4199),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "86255392-d934-4816-8df1-14dd58dd7a82",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4201),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4203),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c60ed366-0822-4855-b243-767fdf6230fb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4218),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4219),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e68c1d4b-66dd-4160-be7a-8c74c383523d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4221),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4222),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "14188d05-eb0a-4aa4-a44f-e04baf2ccc55",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4225),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4227),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7bdafb31-0216-4c37-8911-46418dff94bd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4228),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4230),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "11795758-cc9a-4d70-9e59-b97c1d32092b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4234),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4235),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "fd7937f1-08ac-4633-a03a-6e5141782f14",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4236),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4238),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "140c01d3-ac18-4284-9300-4a56e949ccb7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4240),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4241),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "53c17fdf-3e65-475a-ae95-942d03f08e3d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4243),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4244),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "26567080-0d10-4fda-828d-e79344011dc9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4247),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4248),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "758391d5-77bc-4605-b2d7-31d0f7bdc3bd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4249),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4251),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7165a76b-68ef-43a8-af08-f77a151adc1f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4252),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4253),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "79dc4ad1-bf6f-469e-bf09-619cdee57434",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4255),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4256),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "430d770a-2e84-42ff-bb33-3c4427adeb6a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4259),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4261),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8952c69e-9c81-4319-bd43-e0ee53021c92",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4269),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4270),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "6fcfd620-bfd8-4fa3-af16-d3574ae75b93",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4272),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4274),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a3445893-f3e9-4326-a2aa-caeb8a8304cc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4275),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4276),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "85742ca6-b38b-4cdf-9041-8b764d39f94b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4279),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4281),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7dfde11e-3f1f-4b8d-955f-71c9df789762",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4282),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4284),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "54732b79-ab1f-4a24-9dc3-aacff646221f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4285),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4286),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e90a91b7-b269-4800-9b21-c12d16bc27eb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4288),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4289),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c9cf1e6b-24f2-459d-bd30-503fe6527b43",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4292),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4293),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e28cad17-9963-4446-866b-574b99ba6816",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4295),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4296),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "96de5220-0eb3-4387-9011-9aea23a2745e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4297),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4299),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ae3a0d08-17af-444e-9df6-bd75d7a43ace",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4300),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4301),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5fbda2f9-c471-4b90-a531-3f80d27e0a4f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4304),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4306),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f3c8360c-c191-4750-918b-f582b20c582b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4307),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4308),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "03488453-5cec-4bb0-8ccb-399db9dd5c9e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4310),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4311),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "396eeb87-5952-4a5e-94d9-639111c3198a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4313),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4314),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1fb06d2e-2403-42b8-8af0-1d6728627b5c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4317),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4318),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2a12f394-b6b4-40fe-8577-4c2eb5c95f81",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4320),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4321),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d44e294b-5229-44b5-9cc7-5b278888e37d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4323),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4325),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "fb729190-3e7d-42ba-8449-fc28ebb9a01a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4326),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4327),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "dd4ccfbe-45b6-45fd-8100-25cbfd798b3a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4330),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4331),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "fe8f8c4c-7981-49b0-aaeb-d3eeec3af9f4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4333),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4334),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "80366b24-eb9a-48cb-9996-c740f8a0a49c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4335),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4337),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "78ef4dbe-8d7d-4004-9e9a-492c137de67a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4338),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4339),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "728ba882-76bd-42ab-99df-95df2944955f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4342),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4343),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b32ddc94-edde-4fa2-88a0-0694e2834831",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4351),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4352),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "88b6e983-3ed9-4728-85fb-4d3eed07a304",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4353),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4354),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "cab5ba44-32ab-41b8-887d-f0c204293a4a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4356),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4357),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f947772c-9634-4884-819d-b8fac3f7723b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4360),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4361),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3019fb6d-760f-4384-a455-a986e4b12b00",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4363),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4364),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1ac24897-ba99-4194-bae0-0e42793ef924",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4365),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4366),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "aa88fca1-8d8e-4cd2-a077-299b5ba753dd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4368),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4369),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c3bb5f78-aba8-4131-82bb-a8f5fd2cf9be",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4372),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4373),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3a32307f-69bd-429b-811f-8611ab798dc9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4375),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4376),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "bbb1a3ee-2b70-4e2a-892c-95195a12708d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4377),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4378),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e102cd10-ed8f-44c1-b918-1d7e18c5f00e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4380),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4381),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "bb0ff0ac-e859-4c3c-927e-d5b4217c0762",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4384),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4385),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "68aae8e2-1f75-4ced-8fd0-785ed2456ad6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4387),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4388),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7c6b10a0-b7c7-4999-93e9-ec82f391eef2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4389),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4390),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6bb876c0-a25a-4687-b6e8-e4168b2462ed",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4392),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4393),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "38b9e3f9-96fb-412f-8b68-514aa4747f35",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4396),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4398),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "c8bba9af-9162-4955-80a9-425cef6fd9e0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4399),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4400),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e45f858a-599e-4961-bdf3-f85b554d6acd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4401),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4403),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "c53ebcd6-5a70-4ec8-97f2-09c23c1acd9b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4404),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4405),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b6314578-a5d3-4231-a5b3-5f2e0307be1a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4408),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4409),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8d094033-0cac-42b1-9f61-bb2e16257773",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4411),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4412),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "171b7656-ecd3-4cdb-8de6-00d80484974f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4414),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4415),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e983042e-b79d-4d36-8494-eeab939e75af",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4416),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4418),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "912bc12a-507d-4c54-a1f2-51c39b14b4f8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4421),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4422),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "78c33b37-58f1-4a2e-a59b-c8d727681faa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4424),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4425),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "25605a38-d76e-4340-86fb-b99a56e1ca81",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4436),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4437),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5511463f-fa5e-4ff0-b4dc-3c8a4f64dc63",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4439),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4440),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "abfe241d-5583-4afe-8709-43abe8606e2e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4443),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4444),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5595db1a-cbf5-472f-b83a-e2bcb4fc5d1b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4446),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4447),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "75c5a1d0-2f90-45df-9a8a-b2c0e7d2ef8d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4448),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4450),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "73e3caef-3914-40f4-be9f-536807df0c32",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4451),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4452),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "bb067a02-cfe5-44b8-acb6-5ff893ebaee1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4455),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4456),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "c54921a3-2c92-4ace-b06c-648154324f58",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4458),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4459),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "2596dccf-2ded-4a3e-94e5-bf401ff7cc00",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4461),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4462),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3843df19-7152-4d67-9b78-f2ebb6423208",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4463),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4465),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "694f39f9-c18e-4ed6-88b4-d4c7cb9b6d44",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4468),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4469),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e10dc077-5621-43fd-abbd-f1120ef8fbf2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4470),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4471),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8f408e58-4cd6-494a-b764-5f42afd8302d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4473),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4474),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "481c03d8-164e-4a06-b3fb-822eb82a312d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4475),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4477),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fe0eb9f7-0688-4348-88b1-106f2d435e8e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4480),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4481),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2c416164-d452-4537-85b1-30b52de39e9f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4482),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4484),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a2db108e-8760-4e6a-b8d0-f2692938b2e4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4485),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4486),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "5a9ba7f6-60b2-465c-b897-f60aa7db5cfc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4488),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4489),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "95296ae6-a36e-44b8-bb7e-dfbb68e01fba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4492),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4493),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "04cbf73d-d2ab-43b6-ab8b-37617b927bfc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4495),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4496),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "92b10fac-25d3-43a6-b75e-4963e49ad552",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4497),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4499),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "cadf4389-987e-4433-a3ec-33983c766467",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4500),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4501),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bdf52e12-5c15-481b-999c-c93d5d467880",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4504),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4506),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "38854655-fc9b-4340-973a-414b20c3fe30",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4507),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4508),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f5f1f638-d6a7-4b32-8836-cf74cc9999a0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4520),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 58, 20, 742, DateTimeKind.Local).AddTicks(4521),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
