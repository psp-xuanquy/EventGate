// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240703092930_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "951dcd74-2ee0-41f5-92b3-3e4dc681f7c1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2624),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2667),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "227e19c1-87f8-4b9d-9458-2b0c752ebe23",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2672),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2675),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "28149626-01e7-4b23-b42e-67ab2c52925c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2677),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2679),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a4bddb63-186a-4a73-951a-0251cbd4f682",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2680),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2709),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "cf7e2580-484b-442f-a095-8c9b81941eb9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2711),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2712),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "27d8d9e6-e37e-4e7d-ad01-ab35db7f8aa6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2716),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2718),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "54f030eb-4a3e-4b2f-b5fb-80deeda7b63d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2720),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2721),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5286e8be-b735-4458-a9bf-15f07db04cdb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2723),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2728),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "61aed567-23c7-4358-a2b8-1182c2ad6606",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2729),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2731),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "37b3832b-1962-4476-831d-d6ab24f0b650",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2734),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2736),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8b027fb7-466c-45c1-8f94-d5932962af28",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2737),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2739),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ad7b779d-54f1-4e77-9273-acf28cbf1f90",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2740),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2744),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "675ae974-4d96-4d62-80ef-951558665323",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2746),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2747),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "6dc13f0d-3f10-4c84-9f74-c61e077488cc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2749),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2751),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ddbf3111-8774-44f0-8aaa-309e1233e312",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2752),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2763),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5ffcdfd0-723b-450e-ba19-9743eabf4e46",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2765),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2768),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "78846fb5-25fa-4b26-8b40-40fb38117464",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2770),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2771),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "89aab939-c8db-4627-a8d0-98abae31c1e8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2774),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2776),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "16827578-3161-4f20-ab84-70eff39121d0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2777),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2779),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "802320d2-355b-4521-8421-9a632d34ce61",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2780),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2784),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "57ae6545-03af-440a-b293-3ca917ec6abf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2785),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2787),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6f11bd84-6b25-47ad-9c1f-0e8ebb44794f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2788),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2790),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b829614f-489e-4f58-9915-cc4389d771b3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2791),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2793),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d0181013-d4d8-4c38-8585-10658e2794d0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2794),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2798),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b3830564-bc2b-4105-b6da-ec55ddb9d258",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2799),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2801),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d86722d0-4bfe-4b9f-96e1-4e2ceccaebb8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2802),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2804),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7fe5f986-8a3a-4fe6-961d-2444d4de0317",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2805),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2807),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0c77e5e5-8c0e-4f27-b485-dcc7ad64f53a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2808),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2811),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "cc51dcf1-1b84-4617-9372-abc85add6013",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2813),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2814),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4870a59d-f5bf-4345-a78a-db6a8bab4bfb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2816),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2817),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9041c777-adb7-4e26-9060-4d44e9bac0e3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2820),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2821),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "034c701d-75a1-46ce-850c-6c69b8c77be2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2822),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2826),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "31aa69dc-6ebf-4d1c-b155-668a59e9bcbb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2828),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2829),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e4a13d6a-1893-458b-a496-6ae2a7052422",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2832),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2834),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "01ccace4-5c2e-45d1-86b2-6dce77323de9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2835),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2837),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "b1364073-8c4a-4e51-b91e-ae605cd68bc4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2838),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2842),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0814e3c4-41fe-4908-a65b-e338211536aa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2844),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2845),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "01a139a8-dbb3-4eed-b57d-1b6c7833a370",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2847),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2848),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "cf18398e-cbce-4cf9-aa89-3ebd3322707a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2858),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2860),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a88aa4c4-3bb3-4232-9a41-f4b4b0af23b6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2861),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2865),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "44914335-682b-49f8-9239-c684dc8809a3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2866),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2868),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "2547ee2d-2389-4f48-92d8-3c729e8cf249",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2869),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2871),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "acb25c11-3758-4391-88b3-85a9284094c8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2872),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2874),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ba89ac30-a588-4eb5-a0f2-3cbf11b88d84",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2875),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2879),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5fbce7b5-9fc7-4fa3-94c7-c2335d29c6e5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2880),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2882),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "fdb78e0b-5b9a-45f9-9c4a-fc6e972be3f3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2884),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2885),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "75e7220c-ec9e-4f01-b69c-1292490f3cb3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2887),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2888),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4de15274-f556-460e-b77e-45fab3c7fdbd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2890),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2893),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "30df72f7-2bac-4ff5-bff5-88e499eb303c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2895),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2896),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "12e7eef4-6820-4ba6-b568-05b69b24dd2a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2898),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2899),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "dc8f7078-44bd-460a-a045-1ea7115948b8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2901),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2902),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6d044b2e-6d51-4043-bf6e-1d2d3ed7bc04",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2904),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2907),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a8cc8510-e15c-4ccb-bce3-d0d8c7d7f4f1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2909),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2911),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "25557cea-b631-4424-9c64-d23a7cb5393d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2912),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2914),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2992647a-42e3-4218-898a-b9689c4a59f3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2915),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2917),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "578760e9-8d5a-4187-92e9-7b38086f6128",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2918),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2922),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1c84565a-bbcb-48e6-8452-40edafd23f17",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2923),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2925),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9d9f0a50-5d09-4c39-a43a-9b7bb0dfad9f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2926),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2928),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "358edcba-2897-46ba-bc4c-267631d816e9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2929),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2931),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4e46cbd7-1bb0-4dde-a51b-55b6acabeb69",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2932),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2936),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e50fb015-7682-4a0c-8a21-9fb5b93c99c8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2938),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2939),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "de4596c3-6bcf-461e-bf10-16c6e6a16e94",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2941),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2942),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "08728612-24d9-4e8d-8c6d-d398221f7385",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2944),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2945),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9d31c16a-7a97-4fab-9e87-b0136b8103e3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2947),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2950),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3b95456b-a10d-4d68-a55f-179edb08e76b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2963),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2965),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7c427c25-172d-4d5b-99dc-c4dd83fec920",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2968),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2969),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "84312b5a-282f-40e8-8f5e-e96e225b414c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2971),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2972),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4b0f070d-c34c-4122-844d-27fa40029f39",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2974),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2978),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "83aca24d-58c3-4c6e-ba73-01b93f3dcd6b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2979),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2981),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "61b105a8-f66f-4c6b-9294-984a6d2111e0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2983),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2984),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4163bb12-8287-4eec-af87-18e476896841",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2986),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2987),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "1c2f56ca-ad1d-457a-b4cc-dbf3f736e2cc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2989),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2992),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "fe2dbd42-d139-4571-b608-e5ce515cbfaa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2994),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2995),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "95a97aba-e2bb-4dd8-9bc0-a90d2523a98a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2997),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(2998),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8458a961-86cc-4229-89b4-dfa5db48b51a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3000),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3001),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8fb1779c-b90a-474e-92cf-1adfce4fccb1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3003),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3006),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "578dbfb9-7807-4099-8ae7-30c776e895b8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3008),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3009),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e00f18a3-4a71-45c2-b1c8-9bbb8b068974",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3011),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3012),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a49198d2-838a-4c83-bece-43452c8f0bb2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3014),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3015),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1597b3e4-32c2-4608-9c46-80490aea53ed",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3017),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3020),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d7279cba-3c60-4d8a-bca7-5e67ec288cc0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3022),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3023),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "893ee0ef-1cfa-4fb7-bbbc-2239454c716f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3025),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3026),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c34ceca2-cd97-461f-9ecb-2ae37de4e27d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3027),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3029),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "cd649123-8e18-462b-b406-e603ee99453c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3030),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3034),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ce936687-9e89-49e3-8a8c-56457948d869",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3036),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3037),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6ce4edc6-fdea-425e-bd57-ac5242fbe554",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3039),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3040),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "32d412cf-feda-4422-ae4c-cfd4aaa67f57",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3042),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3043),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d1c2bfeb-8a54-4e19-9bbb-6df06b22d87b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3053),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3057),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "86fbff31-7713-490f-b248-dee1f7f9ab3c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3058),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3060),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a75950cb-d2ef-47b4-8593-eacd6b6ff413",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3061),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 16, 29, 30, 68, DateTimeKind.Local).AddTicks(3063),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
