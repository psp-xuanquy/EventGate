// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240702083948_DeleteFKsInHistories")]
    partial class DeleteFKsInHistories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserId");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "7c146bd2-0451-49e4-9903-58be0556a504",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3294),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3334),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "211b56e2-5e32-4f55-9576-8c269252e4a5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3339),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3371),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "fd157b81-5456-4d51-8d98-6e0d3bce6f7f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3374),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3376),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "11025db3-adab-4ebc-89f9-e9c884ea6580",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3378),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3380),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e2a8a484-498a-457a-9f79-f6c72363f5e3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3382),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3384),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c6786450-f571-4c7e-8027-772ca7f87802",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3388),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3392),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "19a2f741-68e2-4505-9d80-9165c8810669",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3394),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3396),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e7c664a0-8c5b-4cbb-a224-bd4379cf5917",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3398),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3400),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3faf439e-ec38-4234-b6a9-56166e790bc8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3402),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3404),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a53b6b06-3dbb-442b-afbf-4cc8f3a5ccd5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3418),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3422),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "95433c60-5b7d-467a-a30d-d66daa7e91da",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3424),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3426),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ddd6546c-4637-4658-ae78-03c58af86ddd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3428),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3430),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "7e691649-b23c-4402-86e4-d068e3ac8e4e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3432),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3434),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "67d00ca5-845a-4ee1-a4b4-5727bef2087a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3436),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3440),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "9a3a0f36-90db-4262-9eeb-8c4255802fec",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3441),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3443),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "26c498e2-e0d5-4e93-bbf3-0c942ea907b7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3446),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3447),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4fe17a59-1c25-4627-9e3d-c4d7f31f4a4e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3449),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3451),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "2a7c2614-7f2f-465c-bdb8-49d9cd47b35f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3455),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3458),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a323ad82-dfd4-47c9-8bb2-0758474763bf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3460),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3462),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ece7e6a3-e64c-4b8a-aa50-fc882ac4a99a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3464),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3466),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6a8d154d-c08d-4eae-a7f3-edf37953ce02",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3468),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3470),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c08afb92-dbdd-4750-a734-70be5669e82d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3472),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3476),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6e46927b-9c1a-44a7-8687-410f5a433b27",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3478),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3480),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "8d1e3323-27ad-4203-b72d-71d8b481128d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3482),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3484),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b2770648-94a7-494d-aeab-8b8f091ece28",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3486),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3488),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2e4ffd6e-ab1a-46e5-b717-ea60b5b8c483",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3490),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3494),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "80626823-7aa5-44dd-a39b-72b3109fdbdc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3496),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3498),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a634121d-928d-4fa8-aa6c-47e85c57db91",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3500),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3502),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8e63f0a1-fe59-4f23-9a63-2e44e37b5b3c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3503),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3505),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f637f2fc-449e-403d-9877-b13af360bb22",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3507),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3511),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ce0b0d3d-eb87-4a5d-9a90-12577b9f7b2d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3513),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3515),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "4747c11d-b7b2-46b7-83fc-8e2f38053a14",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3517),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3519),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9c408f8b-f8f0-42bb-adc5-77c645ad3972",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3521),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3523),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6e95bde9-01d4-4883-b828-4029d4c74527",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3538),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3542),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "13ea4c22-a2f9-40bd-91db-a997c0fe3a96",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3543),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3545),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "8d50195e-3bbe-48a2-9cbf-6bf57263bc07",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3547),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3549),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3613a9b0-6514-476b-86a7-c2e9777fed5a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3551),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3553),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "7f2b6f09-7652-48fc-9c75-2641e959a2b1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3555),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3559),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "7be13e93-277c-46dc-8516-2c70dad4780b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3561),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3563),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "2a052d3c-1b10-42a0-ade6-a54670f86b03",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3565),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3567),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e6ff9a8d-858d-43ce-9389-a9b8bfdfc604",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3569),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3571),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b0262727-fd3a-4420-a58e-54f73d43afd2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3573),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3577),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8557db32-64a0-4b64-bdf1-55c5a8bae7cd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3579),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3581),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8b6984bf-03a3-4a51-911c-55aefeab7f71",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3583),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3585),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "821042c8-5d22-43a5-a481-803f63355170",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3587),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3588),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "124b96c8-2e19-4612-bf5f-83b789086dc2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3590),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3594),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c199d944-bafd-4e28-9f82-b612f73ab9ef",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3596),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3598),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "2b1f432a-c9fc-48ab-b8b3-9328a898fa71",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3600),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3602),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "98397937-72d1-4b64-ad67-cbe74e54cf6b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3604),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3606),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "02a049b0-d468-4b04-99fe-3d934ce1cf43",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3608),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3612),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1d3770b5-77e3-4665-b32a-c8c7919b0341",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3614),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3616),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "8eada5ac-df4d-40a5-a41a-7096bf27e0d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3618),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3620),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0b3ed390-dc89-4d9f-9e89-6bf9c90161b6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3622),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3624),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a972e8a1-ceac-475d-82b4-d64774da8ef3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3626),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3629),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "773e5026-0570-483f-9ad6-a4e980da7bc9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3631),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3633),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2f727f8c-26c4-42b2-975b-a0e1b0bf95ac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3636),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3638),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "222769d8-6624-49c0-8416-e42d2bd2d24f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3640),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3642),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7f65ddfa-8ee5-451f-8c38-0bf1d69cc068",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3643),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3647),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7bcaecdd-07ba-4d00-89e6-34db8ed7f221",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3649),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3663),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8f47ad50-7ca5-4a39-9758-d5cfc9062787",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3665),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3667),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6fd7d18c-744c-41bf-8fac-ecd1fc4de916",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3670),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3672),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f35ca476-fa40-4551-b573-a9579adbc555",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3674),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3678),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "eeacfc0a-b6a9-401b-8671-e25c5cc05fd2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3679),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3681),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2866a074-f2ad-4c4d-96c5-f5c52e08a32a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3683),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3685),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c80ba533-aa87-4b9c-aee3-6e0f0eabbb97",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3687),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3689),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2cc4c109-7cfa-4132-857f-a24feabeea40",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3692),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3697),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7b97e909-878c-4cd7-bf94-f422731bbbb6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3699),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3701),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "bf41b3ce-81a1-4493-a729-123ecc1a8ba6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3703),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3705),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a9649054-e5fd-4013-890f-c30083196609",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3707),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3709),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d865ba15-34be-4a0a-bdf6-071d3a4782aa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3710),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3714),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "911edc09-6f9c-4a94-9776-1fa11852562b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3716),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3718),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "da7142d5-5acf-4f27-a382-5914636c3a42",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3720),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3722),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "75d3f520-9bb2-40a9-881a-0ffac093cdd1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3724),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3726),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "92204caf-0e8e-4892-a853-4a39d4044dd7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3728),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3732),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "91af67f3-db0d-4f40-bfd7-3631612e875d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3734),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3736),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e71a2bdd-01b2-47aa-a514-9ec1194289d1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3738),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3740),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "12929707-4efc-42f9-80df-94ebc755d5ba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3742),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3744),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "70e45866-3be2-43cf-b4c8-898b7dd2f12b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3745),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3749),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ec06e758-a2fb-44eb-970a-cc0fec4dc82f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3751),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3753),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "92f47011-6f52-4d43-9afb-e6fca9cabe03",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3755),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3757),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "77ddd46f-3c46-482e-bd3c-a49e820217de",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3759),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3761),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "85a618be-70dd-4ab5-a708-3ef417fab043",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3770),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3774),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2c72c8cb-47ea-4f37-a1a5-62b610e2ea0e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3777),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3779),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7d88777f-0166-4b66-9481-7494af076e8f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3781),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3783),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0ad8d7d3-1dbc-4c22-9cbe-14d2278aa84c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3785),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3787),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "907f7d93-5506-4932-8431-80133be28144",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3788),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3793),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a0195d50-5c09-4397-bf3d-0d8624dd60e8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3795),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3797),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1eeddf5b-65bd-446e-94ae-06db23437776",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3798),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3800),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6954ef67-a52c-4603-8c54-1ea31a1d83c7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3802),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3804),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b7cefcf6-68bf-40f4-bdb2-ced8256853b3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3806),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 15, 39, 47, 969, DateTimeKind.Local).AddTicks(3810),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventHistoryID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("EventHistoryID1");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", null)
                        .WithMany("ChatHistories")
                        .HasForeignKey("ChatID");

                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany("ChatHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", null)
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany()
                        .HasForeignKey("EventHistoryID1");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany("UserHistories")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatHistories");

                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("EventHistories");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ChatHistories");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
