// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240626180354_FixForeignKeyIssues")]
    partial class FixForeignKeyIssues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.HasIndex("UserId");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TicketDueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventID", "ClubID");

                    b.HasIndex("ClubID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PosterImage")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "02fe83ff-b3c7-47c6-a83e-d39b6f5d451b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(3971),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(3999),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f5c055c2-25d7-4163-abf7-5515c95533f0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4017),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4019),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "60181065-e3c3-4b5e-8ad8-dc5dd96b101f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4021),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4023),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e7737f85-400c-45a1-994f-01d48a331e7d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4024),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4025),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f8842c7e-782b-406e-b35d-7eaaa40c137e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4026),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4027),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "686d6a86-df4d-4243-8d9d-a1315694fe01",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4032),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4033),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a20387df-7971-4f64-9792-a7ec761fb332",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4035),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4036),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "dc2dcd07-a914-404c-892d-06a80f16409a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4038),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4039),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "2bec381b-2254-4372-a5e9-92a1a96e71a4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4040),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4041),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0866a208-7ee9-4b09-b253-f250a6770ac9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4045),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4046),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e3803f3d-9d88-4bb9-9ced-5c194667e460",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4047),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4048),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e0277c22-f02c-4944-a37d-9101672a7fa7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4050),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4051),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b618da7b-0b0d-40fa-8ae7-71106326d5ac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4052),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4054),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "29939481-ee4d-48d8-88d7-1e723fa79d87",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4056),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4057),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "2b7850ed-0874-4c59-abd6-24b2e7be3746",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4059),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4060),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7af2c75d-c4d2-4d03-b5b4-90ee6d2dd872",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4061),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4062),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "56e643cf-d93c-4176-ae05-10b38886ef66",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4063),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4065),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ff968f16-f2ed-42d1-aaa2-6e848830d555",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4068),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4069),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8f84f932-8b6e-41c9-880f-42b8a4546d56",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4077),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4078),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "63d1ba4f-1eb5-4a62-985f-1bbe9ddc6fc5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4079),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4080),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "91bbd186-c375-4458-84df-d095dfe44971",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4081),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4083),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "310bd8b1-65ba-47cf-92d3-649d8a7f8a98",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4085),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4086),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "57acd458-7600-4fc1-bab5-a7ff94826ce5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4087),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4089),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "8b58ac0e-4e54-46ed-96e7-48b483603e2c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4090),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4091),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a24c28d7-934e-4ebd-a1e4-2e3bdfad59d2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4093),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4094),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a09d7046-ec4e-417e-bf33-de121f7b8259",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4097),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4098),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "77377b0e-e10b-44a3-bb97-f75d441a8dba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4099),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4100),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5aaa0972-a272-4569-9dcd-5035c5dbfce2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4101),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4102),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "52618743-515c-42b2-bdff-f3470c5f00b6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4103),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4105),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fc007e84-3819-40a9-928d-4273ed959a68",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4107),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4108),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f2ecbb0a-1a6a-4778-9c99-7ce33301d07c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4110),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4111),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3948fbb5-8ab5-46f5-bd21-7744dd9be352",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4112),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4113),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2f7ed633-325b-4d26-8e56-9d8b3076760b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4114),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4115),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5115c825-b2df-4faa-b645-a536a0430214",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4119),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4120),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "4b7bdb9f-1b93-4e9a-8210-c4ca04d724e7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4121),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4122),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7f954991-fbac-4afd-8776-1247a8d8e3ad",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4123),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4124),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7eb345e1-34c0-4a87-991b-4a0cad9474f5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4125),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4127),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "c2ae86c0-cf89-4099-9117-db28bdf89ce3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4129),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4130),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "33bd9de6-4371-4b93-91e2-6280e57c3996",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4131),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4133),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "bf668a4c-84d9-4fb0-8e72-940b9650ff83",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4134),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4135),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "29f41b4b-2d75-461c-a7aa-15f17b4cf0f8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4136),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4137),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d73b5bf3-c4b4-4fac-ac56-099624a5653b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4140),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4141),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d69553b0-984a-41eb-92dc-e9680519ee01",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4256),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4257),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f7fba076-5559-41da-8424-40f554055e07",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4258),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4259),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ef522acd-d8a8-44ef-b43b-d5729f5abceb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4260),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4261),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f90357d8-bd8b-4f47-9e8f-bf9b6ef559f3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4264),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4265),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "741b1a72-01f3-4d96-b37e-ad1ac6d48e9c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4266),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4267),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d6521f31-479a-4c85-ae67-d614b31e8244",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4268),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4269),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3a6cfa0b-e4b1-46e0-a982-b2f6cbc00cf9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4270),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4271),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "68f6ab4c-e31b-452a-9942-e9aa6b1cf5db",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4274),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4275),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6cb2dff9-ce00-40fd-be12-01c8166c6013",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4276),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4277),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "8daee16e-57cb-4645-8eea-1738d543e711",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4278),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4279),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7b1ea983-fac6-4096-90ec-324e0a0c1466",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4280),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4282),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9b725762-5f79-4ab8-a73f-b339aef5f0ad",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4284),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4285),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e90da6c5-faff-461b-becb-bb7aec68fd2d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4286),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4287),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7d32922b-e78a-4c5d-9631-6d3fb99c4368",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4289),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4290),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "36329f95-f14d-4f47-ab02-56b04b4ae92a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4291),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4292),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b1897995-8f87-4df9-81a1-d62c297c9ff3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4294),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4296),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4b4e2324-fcfd-4fb3-8006-a11c0ab798e2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4297),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4298),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d7910752-d971-4b7d-affd-6b3e5a515ba6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4299),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4300),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "69c72b4f-7b3d-4ba5-9aba-244ffcc05536",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4301),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4302),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a1fc9fa4-f7f8-4e66-84c2-99a435acd8fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4305),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4306),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ccc3aef0-fcef-4022-aaf5-db150d386fbf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4307),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4308),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a9efa8bc-a039-4983-9349-6c37f77b66d1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4309),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4310),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ad7bdc2e-a432-4c34-b954-0c326110d8f2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4312),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4313),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6d45866d-4d09-4fe2-ba13-c8cbfd47ccb2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4326),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4327),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "02ca56f8-79ee-40a9-af88-0d90e63726e0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4329),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4330),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f69bd1c3-d894-42b0-9fa9-96bc1b318838",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4331),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4332),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "00194226-20ed-45eb-9e5b-718af47411b9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4333),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4334),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9a44b4ca-81f2-4ced-86af-ee361ba8a145",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4337),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4338),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "90c0316b-118c-4527-b8de-b67c0053cb1a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4339),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4340),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "729751b4-077e-4ea2-9e9c-08cdd61ecacc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4341),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4342),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8d59572c-b08d-4398-9fbb-d9cb95fe0259",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4343),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4344),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "40a451ec-a1f0-4f24-8d33-ed1c2e3b10ef",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4347),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4348),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1b3251c4-3ac6-4052-851f-c2c6a1eaed9f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4349),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4350),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "dec237b9-5417-4621-be62-fded87df8198",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4351),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4352),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "b42353f7-cabe-4702-9561-b743df17fe47",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4353),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4354),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "2c123d59-5f45-4a0e-ac25-9e261db96282",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4357),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4358),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "493b9a7a-991b-48b2-997d-9cad7a04d3c9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4359),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4360),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e6b1373d-f23d-4760-a249-283b96e63a2c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4361),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4362),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1c9be519-a3f3-4c60-b2ce-b520e3838b6b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4363),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4364),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "11e0077f-f549-4021-8a68-278d7d8367b8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4367),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4368),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "31bd1a7a-9324-4832-83af-3461a5bb75c8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4369),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4370),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "06d47b48-51ce-48d6-b85a-b8d5d6b91a46",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4371),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4372),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fd60e2c8-33ef-470a-8123-00f5b5483258",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4374),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4375),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "af23d8b8-0379-4164-bf16-96a07ab8c8e2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4377),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4378),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e64da769-f235-469e-81e4-9088fc9e7045",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4379),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4380),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2e24da0a-ed20-4442-ae84-b1309571f39c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4381),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4383),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "40be114b-fc6e-46c6-9cd4-725bc090316e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4384),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4385),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b5cdba10-2c5a-4020-87b2-1f9b2aac65a4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4388),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 1, 3, 54, 311, DateTimeKind.Local).AddTicks(4389),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID", "EventID");

                    b.HasIndex("EventID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatHistories")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany("ChatHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("EventHistories");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ChatHistories");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserEvents");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
