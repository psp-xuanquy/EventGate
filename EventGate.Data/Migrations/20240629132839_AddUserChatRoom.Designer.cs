// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240629132839_AddUserChatRoom")]
    partial class AddUserChatRoom
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.HasIndex("UserId");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "12cbae39-1a2d-4a74-a843-e473a006a486",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4056),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4086),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c076ffd7-a39c-47c7-9fd1-cb4f8d6f34b7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4092),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4094),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "eba85231-67fa-4e00-9312-ca6b8cfb23a0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4117),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4118),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "73ec2e45-5a24-4f32-b385-3a62ac26153d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4120),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4122),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6945582f-d168-42ae-bd20-dd7dc936bab5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4124),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4126),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "b602d67e-1cc0-4cfd-9eb1-02bd41d7ba29",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4129),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4130),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e01875ee-c9b3-4911-8f3b-0165575f96f6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4135),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4138),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e05ca578-740a-489e-93c6-edc2d74080e3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4139),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4141),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "79eb7394-d942-4ebc-bb34-338f0278370e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4143),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4144),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9c6c73df-2956-40ce-b37f-6a0b82501be3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4147),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4149),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "353c0e9a-154a-4c4b-9629-296e66367ec3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4166),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4168),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "bf87f728-5a84-483b-b2f8-507147621dd3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4170),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4172),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "031adf7e-692f-4e1e-a09b-3ef7d7d0ec27",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4174),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4176),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "19d4187b-2857-43bb-a5fe-544e49d9015a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4177),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4179),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7222f9a7-3688-44d0-9648-ab506b62b6e0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4187),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4191),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "fc224dc7-950d-4060-b2be-c23e04719e8d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4195),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4197),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "049041f8-d476-45b2-8b01-25a12fd52b13",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4199),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4200),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "86f8a5bb-7843-406e-bdbf-09532052f8d4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4203),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4205),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "fd7f68e3-a374-4fa0-a177-2d1d5bf84297",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4209),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4211),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6cdde67b-5cfd-4e5a-b3aa-4a5fc45036da",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4214),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4215),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b746f4fe-9f8d-48f2-b99e-0451b5d7dc6c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4217),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4218),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3132d42d-6bfa-45c0-9f2a-aa0befca911c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4220),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4221),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "f71d8809-3fba-464c-a12d-4714bf909e31",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4224),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4227),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "299d711e-8b80-4c5c-8843-2bb490f09e7a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4228),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4230),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a1223f9d-5efd-4349-bab0-19a65b5ae52e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4233),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4234),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9d0b1e07-d5ef-403b-8bb7-d2c352fa475d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4236),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4237),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bd18a955-897d-4b12-86b3-b0b52c86e8e1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4241),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4243),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "462f4112-1ae2-4589-a4f6-144c4e6ba960",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4245),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4246),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a4f21c6b-36de-49b4-93a1-97669e0d5719",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4248),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4249),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1161eed1-e001-4d5a-8688-3da839fac58f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4251),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4252),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "18ce42db-fbc5-4d4a-9495-ac4b3ff57fa3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4256),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4258),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c45b84fb-a1ad-46c3-a43d-1cccb1844501",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4261),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4266),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1e9ad577-91b7-4696-a853-b715bf483703",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4270),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4271),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e8d08bb8-b440-4b5c-8183-bf0a681c1602",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4275),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4285),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "589f1ae2-e0eb-4f7e-ba34-7bb67b828072",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4288),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4290),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f6c31834-6311-4c58-898c-b00a6d9a7e51",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4292),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4293),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a8369c55-75f8-49c2-85ed-2f29ff5166fb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4295),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4297),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "39cd7fef-74a9-4acd-9e13-bd1858736a4d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4299),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4301),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "aff0bbd6-892b-44a5-8101-a108cc938b87",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4304),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4306),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "1677ac47-61ac-4beb-9a6e-feefa31b53e0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4307),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4309),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ce7c6d1e-f453-4a13-b79e-5acfda9dd1e6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4311),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4312),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4d2fd1d6-4d71-4b34-9db9-5f79cbeadf1c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4314),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4315),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "7840e475-5e9b-4811-8ac4-ed6d87d3d53b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4320),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4324),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "db53d107-3e25-4327-ba29-dcde8201d163",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4328),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4330),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "03a2a12c-4406-4efd-ace2-fb0352052f20",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4331),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4333),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7de5aeae-c363-43d9-9720-40e0fe3a58bd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4335),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4337),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "2cdadbad-2669-4b15-a78e-f914d0662c35",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4341),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4342),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5d751d9a-d6fb-4117-bd21-149f6b5f8d29",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4344),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4346),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "51b5b0bd-356a-4502-91e4-ebfde5af3c9a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4348),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4349),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e8a34955-b29a-470a-8632-01c6ea7c919f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4351),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4352),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ff7b92b8-7b7c-44b4-bd27-cc990516c0ac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4355),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4357),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b8916386-6edf-484f-baaf-1da918225dc3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4358),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4360),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "344ddd3b-67d5-4b88-ad8a-4ae1908827bc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4362),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4363),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fae1f51f-395d-47ed-8568-8f6f0f10b3a1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4365),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4366),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "118e5b70-f073-40b3-bd19-32af66ae8fbd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4370),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4371),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "46a32218-1b1d-4517-9ad5-91f9f0b30c74",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4373),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4374),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "45504090-8099-48ba-86b4-d798f7457015",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4376),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4377),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "14bec0d1-7d56-40a8-9aeb-edc03e7ba1f5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4379),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4380),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "368392eb-e0cd-4e62-969a-642ea580a7b8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4384),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4385),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "13e927a2-a2b2-4afc-bdbf-aef1bcf95c89",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4387),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4389),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "02a5b137-a6eb-4946-9ae7-ce04d641e778",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4399),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4401),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "8420269a-b878-48ad-a972-cfa270f680a9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4403),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4405),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9c12fcf5-51d5-4aed-b880-343e0faca357",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4408),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4410),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9fe87361-aa18-4491-9002-2c39bf50349e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4412),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4413),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a6f8e87c-2c60-4300-8453-29b9d2288547",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4415),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4417),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d07c7b79-d8c8-49f5-8faf-ad9744137973",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4420),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4422),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "23f42f94-86e2-494a-87a8-741d4ae97b61",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4426),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4428),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d9f633cf-afae-4ecc-b26e-4a7b1ba4e3f9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4430),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4431),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "71d4503a-90de-418f-80c3-f4036b8ab03f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4433),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4435),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "29b0c8ef-6e2c-45b6-98cc-7b673847f275",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4436),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4438),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f0095a18-1db1-4573-9055-2acf5d1d1d70",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4442),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4443),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "72032cc7-5e2c-4e7c-b036-f6e079206183",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4445),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4446),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0c79207b-bd62-4a90-8fc5-48070c4b098d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4448),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4450),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "71d9041d-ccef-4f53-b036-2590819d9b34",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4451),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4453),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "78cca4da-35d2-4496-a5c1-cdea5b06f7dc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4457),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4458),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "32b9032f-2d40-4088-b8d3-92c3f8212001",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4460),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4461),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e97ced94-5079-4afd-86e2-67988cac7310",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4463),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4465),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "65aff96a-d4b0-4d0b-87f9-f2746dbc0a89",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4466),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4468),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "67755206-8858-4a15-8c3a-6b3de662128e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4471),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4472),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a8057e46-3247-4672-bcfe-73d0ab463d39",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4474),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4475),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a26c0ba7-6bf1-41cc-8306-2790d39d096c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4477),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4478),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b3314ce8-ca22-41f9-b6c8-412dada6fa6a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4480),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4482),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "f8f7096c-70f5-424b-bdf6-96fbfd450721",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4485),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4520),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c0f21c57-a306-4c86-baa0-91c903081bb9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4522),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4524),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a67a8d78-080e-49c4-9b38-c6a9ce13c163",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4527),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4529),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4baaf461-4b8b-4671-9f28-99fc6f58f168",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4530),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4532),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ac9a0b23-bdd1-4344-a0bc-85027eba1de6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4540),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4544),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bb73a75d-449c-4067-a157-88a484b1d44f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4546),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4548),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "88677afc-5761-4249-a0c5-0d4095c9c311",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4552),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4556),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5b8cfd40-669b-40bf-a3d9-5a4bd1fbe4aa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4560),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 20, 28, 38, 164, DateTimeKind.Local).AddTicks(4563),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatHistories")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany("ChatHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatHistories");

                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("EventHistories");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ChatHistories");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
