// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240711084910_UpdateEventHistory")]
    partial class UpdateEventHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID")
                        .IsUnique()
                        .HasFilter("[TicketID] IS NOT NULL");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "ebe83581-26ab-4fab-af43-abcf7eae11cf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5366),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5402),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1d1cc183-c515-4c72-a312-d743e5be4e48",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5411),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5415),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "b4e1bc8d-093c-4384-9291-51845945fc50",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5418),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5430),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "58fb499c-ee1c-41b8-925d-490975376ada",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5434),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5437),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "317ce2ea-7a66-438d-a6fc-25c11af0d9f4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5440),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5442),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0d545b58-41ae-4e8a-88f2-e112f530321d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5448),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5451),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1788fd51-7986-4edc-82a3-0d8d17daa135",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5454),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5461),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "bd415dff-8be7-4e39-84fe-ed83fb79fe83",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5473),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5475),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "32137741-1064-4847-8fd9-0d665d376b88",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5488),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5491),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d38cb9b7-d800-45fc-a689-96218eb5248d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5496),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5498),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a3a9956e-24fc-401b-aff3-b0daeb31a6f2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5501),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5507),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "60f49aec-5fd4-4556-bcb4-598e10514f74",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5510),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5513),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3d705a36-a11a-43ec-a4ed-5b9ae2e34fc3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5516),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5519),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a27b1a91-ea8f-494f-b734-b81179be92d3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5522),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5525),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ab38e8c4-89f2-4782-94c9-384d05d69702",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5527),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5602),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "bd987e3e-2c5d-43f6-8b78-d3c1c2c4ff44",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5626),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5629),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "fcb7b482-3039-49c6-b9e1-2d04b81d46f3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5632),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5635),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "dbe3e7cc-4fa3-4a83-8439-e4e698bcfee6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5640),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5642),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "684a8f6b-6f2d-4aed-9c2f-6720f9b21d7c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5645),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5651),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e66c25a6-bfbb-4465-a6de-40264a54292f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5653),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5656),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "bcbe6e85-0909-4532-86d9-0f896fc833bc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5659),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5662),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b73da810-4e71-4c68-b7a9-913dd0ca905a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5664),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5667),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2beca643-b396-4fa1-9d8e-f47c26c9fd68",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5670),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5676),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "66e610d0-8a38-4d6b-bb35-f2f8178eaa49",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5678),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5681),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "42b5c94f-edbc-4b79-b3cd-fa754d0a9a8b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5684),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5687),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "582d4c28-0d19-420e-8bd8-79fd12f74a97",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5689),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5692),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1934413b-3bde-4b7f-adaa-3a979cced0aa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5695),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5700),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0ed98f5e-f3c1-40e6-ad72-2530d90f901a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5703),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5706),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1192d2ed-d160-471e-b641-f383165b76cd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5709),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5711),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "28ab55a0-4c64-4a56-ab94-99141ea8d41f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5714),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5717),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fb6b13b5-8beb-4e9c-9d8e-c71384830985",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5720),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5726),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6e3064a8-6434-41d1-9639-bfd890caae83",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5729),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5732),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f8bf0196-c29a-4b19-b3b2-4c03453fac31",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5735),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5737),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "47c753fb-eb62-4150-9475-14803e751b41",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5750),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5752),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "cb015fcd-ccfd-44ff-ab19-4f8685eb0a4f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5755),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5760),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "84279dd6-660b-4242-89c3-796dd71297da",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5763),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5766),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "987f47d2-fa82-42ea-b68c-217252b642e3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5769),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5771),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "15f52482-6289-456e-b174-1d9c49853de8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5774),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5777),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a6f04f9d-9a95-4f04-a7bb-b22579c219a0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5779),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5785),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4bb397ab-7cb5-4c8f-90e2-3f28696c39b0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5788),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5791),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a59c3f3c-ae61-44bf-be91-6da3ba921424",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5793),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5796),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "da9c90fd-bc36-45eb-b6d6-cc3067b84f2e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5799),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5801),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "20d693f6-f71e-4032-930b-43276d6feea1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5804),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5810),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7ceeeb72-7d8f-46dc-8061-0a3fb881969d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5813),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5815),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7cbdc3d2-f6e6-447b-8981-b93cf827a010",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5818),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5821),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ff1cce01-9b27-4a69-b63b-3e2a2ceb86ba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5823),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5826),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "06601c56-06eb-49fc-b81f-1aebf086e674",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5829),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5835),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "bd26faff-cba3-4477-88d0-d5075f694ab7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5838),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5841),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1610e201-14e8-4174-893a-27b516a6be7b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5843),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5846),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "13d1ae8d-a108-4d40-8dce-4963f7505bde",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5849),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5852),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ff3f8fb3-a5c6-4f2e-b402-968194233096",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5854),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5860),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a92ad687-4336-498e-94ba-c6c8ad58daee",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5863),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5865),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a8bf017d-8a5f-47d3-a64f-bcc3c11ca4d5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5868),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5871),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3d7b42dd-1606-41d1-8ae0-dd776996b868",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5874),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5876),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0e0bc90e-1e75-4600-983d-3b16a206af29",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5879),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5885),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "afee6c34-a916-41fb-9d0e-8ffb3ede92c4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5888),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5891),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0216cb94-632d-4491-a545-cff82af34f5b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5894),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5896),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bcba893d-c5e5-4121-ab4c-f626d54180d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5899),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5911),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "17a6c37a-614a-46eb-b2bf-0fd051b5bb57",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5914),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5919),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d4155c2c-b242-4947-8e0e-3fe4144f90b3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5922),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5925),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ff014100-392f-4431-a454-7444efa1fe40",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5928),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5931),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0bef5956-3fe1-4b6e-9b71-a2611f58b1da",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5934),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5936),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "bf45116a-1240-4bb7-b97c-ce96e3651600",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5939),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5945),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ad70579c-0500-4612-bb5f-09244356df7e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5947),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5950),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "8c2f27c9-bc82-463f-8752-3a78ab6f82cd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5953),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5955),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5b5054e9-2b9a-467f-a48b-4a04c4d0dfc6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5961),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5963),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "197b5c6b-1a97-45b3-a34a-9dfc7afbf0da",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5966),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5971),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ed940e6e-fefb-464b-b575-9965f172f3fb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5974),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5977),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "47b885ce-3927-4202-b524-f9fb808f30a8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5980),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5982),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f75c9058-fa6a-4e6a-b423-f1a006fdd34c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5985),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5988),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f87a5c5b-2b12-4ea5-a8d9-a5b8d80d1e6e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5990),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5996),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0c2a089f-d0c8-4265-8580-c77254a61f72",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(5999),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6001),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "c066279b-868e-4b94-aaeb-c3b119ecbe54",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6005),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6007),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a18f35a8-ca3f-462c-bfa2-abc522df217c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6010),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6013),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "344e807c-a0db-4eb1-b528-83c7b1275679",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6015),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6022),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e5fc1465-3990-4d1b-ba54-911d3484551e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6024),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6027),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f5ed7f6e-452d-477e-a13b-a9f74d49ba80",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6030),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6033),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "6402aa8a-7a1b-43e5-a5c6-e773b8bbd5bd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6035),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6038),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "b465b208-9a11-4417-8052-373414333941",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6041),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6047),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "14917379-b3c1-4f61-be71-e5f426797003",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6049),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6052),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7141765d-9283-42b4-be90-dc98ad913400",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6055),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6070),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c0337c70-a635-4a8c-b7a9-5c2d6b6fe9ce",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6073),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6076),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "bf72768b-780a-4aac-a0d2-6414c3f72536",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6079),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6084),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "750216f8-289a-4501-81ec-e43ffa9a5aa3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6087),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6090),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4b7a65bb-5fc3-40f4-b153-7cd16caa932b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6093),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6095),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "292b59d9-a781-466d-9f84-37f4c8c26a0a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6098),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6101),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "c16a2d2a-92a8-4de4-98ee-0e4a1f5be64e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6103),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6109),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1029c137-ed47-495f-9f2b-1dc503bb8903",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6112),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6115),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bb23767a-4fb0-43cf-8994-285d7daf263a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6117),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6120),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "52b5771c-e9eb-4b96-8f8d-75d0d231dd83",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6123),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 15, 49, 7, 616, DateTimeKind.Local).AddTicks(6126),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithOne("OrderDetail")
                        .HasForeignKey("EventGate.Data.Entity.OrderDetail", "TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
