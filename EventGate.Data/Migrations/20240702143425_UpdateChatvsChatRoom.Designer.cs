// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240702143425_UpdateChatvsChatRoom")]
    partial class UpdateChatvsChatRoom
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatRoomID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "65df2355-f7be-4bec-b2d6-d1595db25f85",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1312),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1356),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "68874782-b229-4a00-ac2e-df654927ccba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1362),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1364),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "094cf661-0251-49ca-948b-fe283d6680ed",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1366),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1369),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3ef51b4b-9c02-4ab2-b1fd-91b258817b7b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1371),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1373),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6c937604-17d8-4e22-92a0-f69b65c8ed72",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1378),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1380),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e703ab48-47ca-446d-a307-b3d1c85b0be3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1384),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1386),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0f82237f-aefe-4e55-a7b1-3813823a531e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1388),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1390),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0507abcb-2caf-49ea-8584-c3b7c40ca205",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1392),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1394),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "db9ed47d-db6f-46da-a3bb-aa339471edda",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1398),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1401),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a2cd7dfa-cb73-4553-8606-da9a8f6c4061",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1404),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1407),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f676b52b-5ec8-4e6f-8d21-e1a5f1d22c5b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1409),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1411),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8d9a09c1-4fc0-45cc-984b-85104e572627",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1412),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1414),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9ec9482c-30fb-437b-b130-902dcff8f8f7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1418),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1420),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "383cab88-a8e7-4dce-9ce1-858fb95c4098",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1421),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1423),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "92e48b80-98a9-4ae1-a075-41663c769b91",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1425),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1427),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "013cdb56-257e-4bbb-8398-2c2865b7341a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1428),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1430),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "9d9d7ad0-8549-4855-8f3b-23f54420364f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1434),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1436),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7b99c7d1-1d6c-45f9-9dc1-d358b58d7ab4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1440),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1441),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "394c4b24-e1d9-4dc1-ae14-51460ca7fc95",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1443),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1445),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "facfa3a5-bfea-488e-8c6d-e171660c795d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1447),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1448),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ad15ee70-074f-456e-a59e-bda609230801",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1452),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1454),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c8f6c7be-74a1-4249-9cb5-6d2aeb6a868e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1455),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1457),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7f0ed34f-3578-435f-aa9b-a6373fbe102a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1459),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1460),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "98940c6c-cc22-4ec5-81cf-0c70daf45541",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1462),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1463),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0638e21c-cf7a-4b2f-ad78-4c9b4f4112ef",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1467),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1469),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2b4515f2-3c43-4664-a633-df789a7284b9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1480),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1482),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5a0b8688-d785-4461-8681-793f90859993",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1484),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1485),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2d86424a-5373-4369-b33e-cc54ee3c3d58",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1487),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1488),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2ad74019-83fc-4bea-a016-111274f2c8d6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1492),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1494),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "53902afb-979d-486d-810c-047acc7a8115",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1495),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1497),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "3d4caf69-cc7b-4c89-a291-e791d278d89f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1499),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1501),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "bb8a6518-1c70-4343-9391-d180c3a1b84d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1503),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1505),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "83ea779d-5a74-4cca-b3c7-ffe35a600a76",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1508),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1510),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6ab5f32d-0b0e-4e56-9d62-cccbaa91fac1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1513),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1515),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9d9d4443-17db-4fca-970a-775df933e3ca",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1517),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1519),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "fe37e6a3-4a50-4990-a67c-fc635fd270d2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1521),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1523),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "421096a9-da75-4787-9c6d-4fd8e9215438",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1527),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1529),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "614f1119-66a5-475d-908e-294635a3f561",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1531),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1533),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "1ee2f66a-94ed-4d5b-b5c1-90e18c110a47",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1534),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1536),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0fc5c3a8-36b8-4ad3-aa00-3dde21dd1316",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1537),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1539),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "1af0ca7a-2a47-4495-8251-98efaeb0b515",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1544),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1546),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d609d90d-ec17-4047-af8e-8d6aa4ba8065",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1547),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1549),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "bca27f99-70e7-4c1b-9524-7be58f58fd88",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1551),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1552),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "38dfdf22-6818-4073-a432-f50943c70540",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1554),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1556),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "9df81245-54e7-4e0e-b3e1-ea285ef218fd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1559),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1561),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "aa7f1239-7998-4760-8de0-d8b88e9c6e53",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1563),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1565),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "836811f5-1326-446b-a537-3f5736e7ba2f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1566),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1568),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "599cbe54-78c9-4bb5-b1ec-219e7181bdcc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1570),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1571),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "b3fcd2d7-9bbc-4c7e-9e13-d5d1f3a913d1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1575),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1577),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b1739b5f-4a91-4a3d-9aba-1b1a9145635a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1578),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1588),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b609a442-6ce8-4506-90d0-1d642aa15816",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1590),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1592),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3ae1e45e-e9b1-4608-a570-14becfd1e092",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1593),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1595),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "cab82cd4-a758-4ad6-96e8-576b2c9ba7e8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1599),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1601),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fe7306ab-fd1b-49bf-b5cc-53d356e27c93",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1602),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1604),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0e70f9a9-663d-4fea-b916-48ccc5a9d7fb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1606),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1607),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "77f8dc5f-6e53-4dab-aa9e-2b1eeb805ffe",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1609),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1611),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d19accb6-55be-4a05-b296-685905afa714",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1614),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1616),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a99c7613-2117-4e65-b9bc-520a387eec8f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1618),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1619),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "80e42bc6-c732-4645-b9ae-55039fb2a890",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1621),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1623),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6ad6c459-bd65-4e0a-9b28-51c741c785c9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1624),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1626),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d42a88d7-bc08-44dd-8d7d-e36ec5371dfc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1630),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1632),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5fb404df-0b9d-410a-af10-677a9baa4eb1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1633),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1635),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f8aaf185-e0bb-42db-afc5-dab9e9703fbf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1636),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1638),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3e0f08e2-205a-41b9-af3c-60438bb47aa0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1640),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1641),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "67ff17fd-ebbc-4158-9d14-3ffd84351316",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1645),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1647),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "add4175e-1069-45fa-bcca-dd2433b01dae",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1650),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1652),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "aea7ad29-9e4a-4ab0-8c58-afc717a87044",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1655),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1657),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "eedccebb-636c-4643-becd-a99839fc3ef6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1659),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1660),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "362536ff-7c7b-4320-ae66-932523368afd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1664),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1666),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6b028b63-d727-4363-9913-d9206140b1fd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1667),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1669),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "53329791-aacf-47dc-b2eb-349419e9ec0d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1671),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1672),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e34935c4-dc09-4680-837c-ff9769c13108",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1674),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1676),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8af7cf55-6c15-41ae-b567-21cb311e293e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1680),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1690),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a366218a-428a-4f4e-8ba2-6a8a338b9b53",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1691),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1693),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c8431ff4-1fce-4f96-88c0-4e3a7b54ee07",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1694),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1696),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ace487eb-ab36-4b7e-ab9b-336bdd9b95a0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1698),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1699),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "01ed59ca-19b2-4f4a-a283-d51bc0dd75c8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1703),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1705),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "cc556ec0-f2e2-46fd-9f52-b48b23a9955f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1707),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1708),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a5eba644-c599-4140-8aa5-f486f3c6b2e8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1710),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1711),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0190ec94-463f-48bc-bdb3-047f51a32752",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1713),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1715),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "42a04ab4-5a94-4feb-a671-8408d270fbcc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1718),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1721),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ce1b94a4-3073-4fe8-8439-8078010e0b71",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1723),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1724),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "68fc1c22-12f6-439d-a073-c25dde91172f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1726),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1727),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "8b43a321-a2d0-428f-a277-fdbdcdb44456",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1729),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1731),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "623ff9a7-a401-4b17-8dc8-1da92c5c272d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1735),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1736),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7e82bc2c-e367-4390-92e8-eb64e57586fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1738),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1740),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "79487173-1f29-4643-9f7d-deed347dc6ba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1741),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1743),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "44483bb9-ab7e-4909-8805-b7aabdd67476",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1744),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1746),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9d9cbe57-86f2-4bec-b9f7-e83314d0d03e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1750),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1752),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "89a1c6f7-f0be-4e65-b965-ecc62e90e49f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1753),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 2, 21, 34, 24, 779, DateTimeKind.Local).AddTicks(1755),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventHistoryID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("EventHistoryID1");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", null)
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany()
                        .HasForeignKey("EventHistoryID1");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
