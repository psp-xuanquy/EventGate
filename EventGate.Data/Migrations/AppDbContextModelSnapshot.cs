// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "049b363f-74d9-46c5-a86b-1bb3b0308f86",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8127),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8153),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "363ec671-bce6-4200-aa90-a6f5a74b3aff",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8158),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8160),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7226bcad-288c-4b8b-a374-e48cb0bdbd68",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8162),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8178),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "74713e76-132d-4df9-8f9e-ab7449b9ced9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8180),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8181),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ca7759d8-a791-43c9-be48-dd80e30e0e7b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8216),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8217),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e4ecefab-95e8-4287-a1eb-a99d06987d2d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8222),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8223),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7749d0b7-ce2a-4371-bcb1-4c5d1a99e225",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8225),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8230),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "72a86538-cb91-411b-9e7c-5bf4b9312767",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8232),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8235),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "38ce4043-019e-490d-afc3-f1563277696b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8236),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8237),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "71cb587a-9ecc-44f0-8bb0-d6152d5406df",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8241),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8242),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "76ea879e-50fb-4bfa-80fb-7cd5f47509b4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8244),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8248),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a16ca628-5070-4b3d-9d37-17bbfe95b4c4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8249),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8251),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "885f3f1f-6316-4dba-bc5d-aedb390520c0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8252),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8254),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c7de8af7-47f8-48eb-8c28-022b01135939",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8255),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8257),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "0f0aea64-0ca8-459e-9fd0-8a3f9cbd6dc4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8258),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8261),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "36ea1196-114b-44c1-a21f-0b8279283cbc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8263),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8264),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "36fd5271-4919-40ad-9d26-d6efc4997d7a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8265),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8267),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d64cc5bf-bdd7-49fd-aecf-9ba20aa0e89d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8270),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8271),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "486c3ff0-21dc-4dd9-9c0c-e1033d1a8e93",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8273),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8277),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ac7fe157-c3c1-4a99-9871-ea084cadad90",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8279),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8280),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1b410768-27aa-48cc-98c3-1cf0f166e6fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8282),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8283),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "78319ddf-4507-44dc-8369-f6bf7a8539b2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8285),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8286),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "754662ab-b675-4e3a-b3d8-322a18d6e7bd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8288),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8291),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "18ddf2eb-58fd-4cba-98ba-4e21327d6014",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8293),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8294),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "5224bd31-1e7d-42c2-b183-0b2457d13b09",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8296),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8297),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a5623cfb-ce76-4cc3-b8e0-0506eb989534",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8299),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8300),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6ede4099-cc5d-49de-ac7a-63bb714fd5ce",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8302),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8305),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f6e139ba-bd29-48d1-8fb2-71534a81eb23",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8307),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8308),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bd0bb0ec-761a-4db1-b7aa-a54fdc164160",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8310),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8341),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fc0bf9c7-8643-4f71-9317-5b25dcc72153",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8342),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8344),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9ee5b2e9-c146-4b0a-bca9-c06c74129c8a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8346),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8349),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a392ca4a-3db0-42d8-a304-097a1aa37e02",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8351),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8352),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7f87538e-72ee-405d-9b62-e8701cc4b2e6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8354),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8355),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6db3f603-7f39-472f-9048-d8bb42849749",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8358),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8360),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5ec7c1d3-8f5f-478f-a27a-2c173ce55836",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8362),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8365),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e7973d97-78be-4fec-b390-5178010816f1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8367),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8369),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5293f54a-6cfa-454b-8557-4c7c00f1a814",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8370),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8372),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "065cd5da-7b16-461f-a463-f7182daa88da",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8373),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8375),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "74fce975-b879-4695-8f54-5ca9285fc587",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8377),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8381),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6f23def7-9d42-460b-9b16-4452a87cfe3d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8382),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8384),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "612c516f-80bb-4a67-86b0-abcee481da0d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8385),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8387),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "47b50fc3-705f-419d-bea4-4f0b0e0de85b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8388),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8390),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8afccdde-aba6-4ca2-8215-dd2dc66f96c1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8391),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8395),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f1469b37-e8f2-48bd-b699-43f47025d8ba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8396),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8397),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d07c1576-c174-45d6-b4a6-55d727894065",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8399),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8400),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "59a658f4-5009-44ab-8ad7-3275b968db4b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8402),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8403),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "350bd1f2-87f8-4ec4-a7a8-1f022fd91e97",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8405),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8408),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "51b4ebdc-7400-47e6-9b14-9d743e0af211",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8410),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8411),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4cb57077-8e45-4571-8fb6-183e015a2728",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8413),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8415),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c75f856c-1f49-42dd-9992-1ae85f669bd9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8416),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8417),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "feebce24-34ad-4fc1-bde8-a31385a034f9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8419),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8422),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "905ec347-377f-498b-9624-5dfd3e74f117",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8423),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8425),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9aab112e-9a84-43c6-a622-4ab4a39b23b7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8427),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8428),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4efa0041-5160-4e71-b70a-810045edeaa9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8457),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8458),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c935dcd9-3491-4fdb-820e-fbb6d81ea513",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8460),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8464),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "451b052f-1610-4dc3-a296-8706fb255c02",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8466),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8467),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "69662f03-7497-4e6b-a9bd-275bc1a8b9ec",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8468),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8470),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d3f08a62-0a25-4897-a9ec-40b45b7bcefb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8471),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8473),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d4eaa282-3ff3-434e-bac7-d3afcddd774a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8475),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8479),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f72d20ac-5d26-4174-b9ea-57d34bbce5ef",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8481),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8482),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fc81315b-e03e-4c59-a2f3-112705d5ff53",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8484),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8486),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5e3a8a77-dd1f-45d3-b5a0-eb0c2151423b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8487),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8489),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6c0fa4b7-db8d-47ae-9396-d12b2d648347",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8490),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8494),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0d855e20-fb6f-4e12-b0fd-a50e086b92db",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8496),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8497),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "563fc88a-19cb-46bb-b257-22482bc5a9cf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8499),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8500),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c5c1932c-3361-4b72-9140-581babf8229c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8503),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8505),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ad6acb48-134e-4b29-ac5b-f2f4a9ad4d7a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8507),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8510),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9924f660-4d55-4ea6-8374-dd447825f1f9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8512),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8513),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "30010f01-13b1-4f3b-be75-28fde33928e9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8515),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8516),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "47ca13c8-e5b4-4c3d-babf-8da2cc171806",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8518),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8519),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6f1d2803-8d77-47ab-8086-5eda7b423f0e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8521),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8524),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5cda44da-8f04-4c8a-941b-bdc8c3a16e72",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8526),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8527),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d2d3eb9b-006a-4c25-a43a-0db4c0f33d6d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8529),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8530),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "38d6d0eb-0c92-43bd-8d7b-7f2ed213fc9a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8532),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8533),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d1fdd0da-3926-4215-98e1-252f41b03216",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8534),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8538),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "dcba1f33-a8d9-4053-9521-c14015322a6c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8539),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8541),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f82fc6a0-3f31-49a5-8ca9-27c2ffc343ca",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8558),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8560),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "0b6f7d99-a7bd-4c0f-bd7b-de650fa17b55",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8562),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8563),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4b3c533c-73ea-49be-9f0d-866f1700d77b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8565),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8569),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "38f9f062-d2fd-4772-8039-1c930a2e1757",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8570),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8572),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4791272c-24fe-4295-a89a-cd6c8163ab62",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8573),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8574),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "f6a82984-ac33-4a95-8994-6d9da957d154",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8576),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8577),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fb1d3e81-1139-48d0-8391-e3e3c4637ce1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8579),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8582),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9939d03a-0c0d-4a61-b078-a7b01beca7e7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8583),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8585),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "44c428ce-d3d0-4265-9c8e-e21b8393379f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8587),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8588),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a08f3ddf-7d68-4ef9-8017-30d9fca68cb5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8590),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8591),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b893fdad-7c8c-41c0-a240-e57d2a2ed0fe",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8593),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8597),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ab4a5744-81e5-4dad-b04c-600fa251ab12",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8598),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8600),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4d911208-530e-4398-99aa-66d4533e7564",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8601),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8603),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ebe59b0c-d925-4a8f-896c-770fd24c4efe",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8604),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 3, 17, 22, 32, 8, DateTimeKind.Local).AddTicks(8606),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
