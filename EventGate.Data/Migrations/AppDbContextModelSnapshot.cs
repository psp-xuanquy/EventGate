// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID")
                        .IsUnique()
                        .HasFilter("[TicketID] IS NOT NULL");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "99dd5a2c-f216-4e35-91a4-5cbfbc0fc384",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5781),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5808),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "951ab28d-b9c4-44cf-9b9d-f91b3b6f07b3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5812),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5814),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "bfac4891-5ec2-4c0c-8939-36167408be79",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5828),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5830),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "b4f75a0c-d9e6-4424-8333-d8537f680bb3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5832),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5833),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "cfb9a5b7-15b5-46f9-98d3-3327b8837940",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5834),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5836),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a225fe7f-fa60-41e5-975b-b16dd44562c8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5839),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5852),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "11eb37f1-5c25-4a81-b3f9-5f5704c0a766",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5856),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5858),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e6dd6c29-35bf-4372-9029-0bc608383da1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5866),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5867),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3ac97317-8f56-44d2-b516-0960cb4f4575",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5868),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5870),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "58d4b3c3-7f59-4dd3-b799-e2ab680a501a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5873),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5874),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "28c481ac-fe97-494a-8939-ca751c214ad7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5877),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5878),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5874a91e-c1c4-4ccf-91dd-f18e03328579",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5879),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5880),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "21737183-65dd-4891-8c8e-9536d8a91cc3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5882),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5883),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ced51686-c46d-4cf6-a13b-76ccdcc4119c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5884),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5885),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "65ea5a99-f7e6-4fea-8f79-d691c93c434e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5889),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5948),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "cdbbf949-8ef4-44da-b306-c2bdf245a858",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5964),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5965),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "df7b0ad2-7048-4342-95c1-a6217a558f8f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5966),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5968),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c7c21bc7-31d1-4c67-a436-d51be84c3abf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5970),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5972),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "227bd83a-800e-4616-a698-783c7ea3d679",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5975),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5976),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e85eb31d-2cd8-4cd0-b1c9-e07670061b42",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5978),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5979),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "88f5cf2a-8997-407e-abdf-1b8282ec030b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5980),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5981),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7783ac74-a168-4652-b8e8-58da633f0a6c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5982),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5984),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "90feea8e-2bd3-46f7-9285-56cc9dea1dcb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5986),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5988),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9d7c9bef-1807-4ed2-8ae7-40527bc5ae03",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5989),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5990),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "bcfb720b-f41d-4ab8-abf8-70f7b24cba58",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5991),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5992),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "21d3ef94-3161-4edc-a058-710825cb11b5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5993),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5995),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e6d7645a-0ac2-484a-ab61-1c433c387e15",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5997),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(5999),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1bd02051-46e4-444d-8be6-a42a251e23dc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6000),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6001),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1ff2c48d-3a35-4107-85e0-1b30063cd929",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6002),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6004),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b242fa41-77d3-4d0a-8734-0e69bde07657",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6005),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6006),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9d39b32b-6643-409c-8a02-f1339f14d6f2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6016),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6017),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0aaecbde-bbad-4a79-abf9-de911cf95ccc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6018),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6019),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a7b8a8de-59d8-44e7-8452-b333d85fb9cf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6020),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6022),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "4ca583ae-e87d-4e28-b21e-dc78eb2d8abc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6024),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6025),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6c2685fd-57de-4524-9c0c-59a52d54baeb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6028),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6029),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1fb805ef-41ef-4909-b6b5-df5486dea236",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6031),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6032),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3d2568ea-2bef-414d-bcd5-53867f019049",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6033),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6034),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d650b750-1729-4855-b0c5-2f8684d8a621",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6036),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6037),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "34d5f98d-aa88-4d05-8391-e336181d5d1c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6039),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6041),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "58587d02-0e11-43ca-a7d4-73aaf8b77b04",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6042),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6043),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "25066bae-374a-4820-a588-0a806ab5b116",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6044),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6046),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e2339dda-3ab4-456d-81b0-433850b92724",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6047),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6048),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "be7c5a24-42aa-456d-9581-1ad912fb821a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6051),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6052),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "11789c2a-711b-44b8-bfd8-c6c015819aba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6053),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6055),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5909c6f2-9e11-4b8e-877f-3864c49179ba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6056),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6057),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ce4d0130-2f08-4643-b0b6-56d750c447cb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6058),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6059),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "bdbb4b9f-aa20-483d-8870-36fe8282c9dc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6062),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6063),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a0477ae4-71da-4dc4-8898-a2cc0193f527",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6064),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6066),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "aba8fad5-21b0-4809-9c86-a927c123baae",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6067),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6068),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4f8f9778-fab1-44ca-9fd8-b0a1f4fecabe",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6069),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6070),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "12a19f2d-5cf2-4bf8-958b-426c9cbe8738",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6073),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6074),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7d4ab8d4-c46c-4b0a-b7d3-5e3237548c09",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6075),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6077),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d28a402e-c771-4566-931a-868bea57bb10",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6078),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6079),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "27489087-ad99-4167-b17c-dd30b0d474f7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6080),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6081),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "bc0a81cc-9e71-4671-8d34-bdb89993f219",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6084),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6085),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fac85361-2a7c-462c-8f2f-e584b5ffe9dc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6096),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6097),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "880b38dc-0eb7-4556-9636-480c02b2ef85",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6098),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6100),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f58946f6-a55b-4cf2-a25c-9e334720205e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6101),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6102),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f8711b1e-dc42-4bb3-8d47-39fa2bc6a846",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6105),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6106),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "435d5011-2b36-45f8-aaa0-ce8bec0944bb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6107),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6108),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d6a0b699-7445-4f5a-8a87-399effd59da0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6110),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6111),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6d071bf1-6288-4793-a209-5917279b67e5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6112),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6113),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9b5216fb-4f4e-4089-acad-3029aa80907f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6116),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6117),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "42dada77-32be-4731-a361-c515885ad96b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6118),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6119),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "99942093-4cde-4461-9558-a094aace63f2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6120),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6122),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "26797363-d1f9-4155-b042-9858a1d3e9be",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6124),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6125),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c3ea9a1c-c79d-488c-a92d-7dcde0013e73",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6128),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6130),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "98a2fc37-63b6-4de6-ae8e-9d7021d0e1e0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6131),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6132),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "58082f9f-88d9-4a5f-8986-c0b4b0c0290c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6133),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6134),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "58600526-e289-4444-985b-3bd711deb62f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6136),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6137),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "c3697d5c-79b0-4672-8867-c81370d81559",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6139),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6140),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ca810bb9-6ad7-463a-aade-f4b3d76a1144",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6142),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6143),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f68c5899-fad1-4bdb-8238-e5051fde999d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6144),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6145),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "51c6f470-d136-4ee2-ac7e-a8d0d60e5596",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6147),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6148),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f0a397c7-a5b9-4711-a89f-bf961778e545",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6150),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6152),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "005f243c-1749-4539-88a2-38578da06b1c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6153),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6154),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "bba339b6-07e5-4463-b16a-f7ec8a7f701b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6156),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6157),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "59c80727-b0c9-4dbc-80d1-28b30a13d3c3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6158),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6159),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c0136a1b-2584-42f0-bbef-668995fd0aa6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6172),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6173),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2e9a7594-a0fb-4b27-9760-83578cf736a9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6174),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6176),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "f11e7dcc-e3ff-4db4-b7d7-a5821cbc3f6b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6177),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6178),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e896df22-983e-4f3d-b58f-c494a840b3e0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6179),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6180),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "484dbc21-a7bb-4336-bf94-c1975248e87a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6183),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6185),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4cb1f814-31e5-4855-b2ae-e745f006c649",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6186),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6187),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0bd9ac9c-2ee4-4d77-bb60-047858e47654",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6188),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6190),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ae8fca98-d6e1-43f6-b69b-75d05ac356dd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6191),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6192),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fe2a99f8-c8a8-45ae-8054-f1ac36c056e5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6195),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6196),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "574a055a-7140-4f7c-9534-55938c95e01f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6197),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6198),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ed626735-664d-4563-b603-44d89ad8d9a0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6199),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6200),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "dc0bb1dc-7674-4cf0-a80a-b621ba078281",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6202),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 37, 6, 607, DateTimeKind.Local).AddTicks(6203),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithOne("OrderDetail")
                        .HasForeignKey("EventGate.Data.Entity.OrderDetail", "TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
