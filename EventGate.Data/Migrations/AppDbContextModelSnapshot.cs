// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TicketDueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PosterImage")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "0f86b350-96ee-422c-bf66-d93524e1dde6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8263),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8287),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "03287f27-2ad8-4f73-80b7-64d2812e0e48",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8292),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8294),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "621d57fd-fb4b-4701-857a-4bfb9669cec7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8295),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8297),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c867e90a-9ed8-41df-98c2-9cc2164bb373",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8298),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8313),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "93b6276b-899f-4d8a-aad8-7523a2ec8da8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8315),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8316),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f0c74ee5-ac8f-4b4d-b176-f13c2beccc80",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8319),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8320),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "683b0b22-1ef4-4d6d-8e06-8fe309ee8bd3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8322),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8323),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "eb99bb45-be3c-425e-82bb-817f59dd6225",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8324),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8328),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "2348dab0-5b69-4db1-8547-2e12fb79604d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8329),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8331),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "cf0d1a4e-c586-464a-be36-e1b7cf973ebf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8333),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8334),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "80bd34d3-695e-4792-b901-c589ff940ebb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8335),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8336),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e8c45f15-9ba6-4630-a67c-dba580c64307",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8344),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8347),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "164100eb-45c7-47f1-9953-71bb8f1f70fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8349),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8350),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c576b31c-e1a8-4d86-99ad-2638045bfcaa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8352),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8353),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4f3b5593-daf4-4125-a363-f972b1d8a893",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8354),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8356),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d787bc9f-300c-47d5-866e-f8fd5415740e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8358),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8361),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3ec81c30-6fca-4fba-ac6b-798875d22615",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8362),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8363),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "b3dcda7a-415c-4534-bacb-4eb870dcc0bc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8365),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8366),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8242b0e6-f490-40c4-806a-403589a868bc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8368),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8369),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fa256b96-c123-4cda-a626-a148441ce1cd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8370),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8373),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1be9987f-5728-4f11-9d6c-2419505f28cc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8374),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8376),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "46d515a3-a16b-4d70-92f4-f543904e47fe",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8377),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8378),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "87fd747a-78fb-4e09-86ca-adf264a50a08",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8379),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8381),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7819a534-0d17-46d6-99dc-f4c443f06aa9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8382),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8385),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e584c119-9f53-4c41-82b0-c065283fead8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8386),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8387),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "d3c0bdd7-802b-4756-81b1-3706446acc96",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8388),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8390),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2973eca7-62e5-4c44-87ac-2a5b7af3ecbf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8392),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8393),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e067e934-b06a-4829-9f0d-5b7f86aa1e40",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8394),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8397),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bffbc21d-1ba0-48fa-a7a8-e3f0702a9936",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8398),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8399),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0ed693c5-9258-4360-b9ef-d14c4a4a3190",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8401),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8402),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1fd6da40-161b-46ea-8456-1b7ce523c5ae",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8403),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8405),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "98650eab-ad18-4ca1-a8e2-f8591f5a33fd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8406),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8409),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "959b7a97-5c6c-48c8-9379-e4262c7ce049",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8410),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8412),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "77d0798c-5435-4a0b-90ba-ce0cdd180e6b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8414),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8415),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d6b8fe73-b00a-4ce6-b12d-3d972d2ae012",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8416),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8417),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2bad08c8-7f25-4cc3-956c-d65bc5785b22",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8428),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8432),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "82ea438f-0a3f-4356-bb75-339607c572e6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8433),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8434),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e060ad10-3fee-4a21-b362-e739bfa5fb54",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8435),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8436),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "aae0aec7-6d93-451e-8c38-1edb65df2161",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8438),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8439),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6c50e080-e590-4ba4-aae5-de040c4fb860",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8440),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8443),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e61dea7b-0acd-43fb-a27d-fb5e7dfeb5ae",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8444),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8446),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "c1388655-2bea-458a-8c9d-783eed406cfa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8447),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8448),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d18db6c4-2d9c-4257-b374-dcc1de9de31c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8449),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8451),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "04b2ede0-f4e9-44e8-90c2-f43a84bc16e3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8452),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8455),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "836c27aa-96e0-47c3-8e8a-f709a5fec9a1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8456),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8457),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c11d467e-0bbe-47d7-8aae-c4fc01251a22",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8458),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8459),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "478c7ed4-66d8-483c-bb74-5ac2da210951",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8461),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8462),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a6a97c87-fff7-494f-9f3d-32b7bde4b621",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8463),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8466),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1c1ec68a-d785-4141-bdc6-522f76d6968a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8467),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8469),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9c1ee3a5-25dc-492f-9f2c-224bcc1e2976",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8470),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8471),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "5d3fa2f0-a65b-444f-acc8-bb8441d86150",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8473),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8474),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fdfc216b-589e-4002-9319-c234a1e2c640",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8475),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8478),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "179a407e-bf23-47d3-b32b-0e23019c63d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8479),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8480),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b6337e20-e9f4-4c34-95a5-2c949bb7483f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8481),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8482),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "35cdbff0-54a2-480a-8c23-7308c09faab3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8484),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8485),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bc0cae71-aece-4484-9098-238b60a04a17",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8486),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8489),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bff87dfa-2b3a-4ed2-b831-34493bc95f40",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8490),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8491),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7ecf704f-3db2-44e1-abe9-cffa2f1c46bd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8492),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8494),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "19c0d2d9-011d-443e-8466-33c47778b9e5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8495),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8496),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4e755093-94e7-42a6-839b-8fb23705ef3a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8497),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8500),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2acedb4d-1d47-4f30-9ac7-28a2b898af59",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8502),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8503),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0628d1a4-cbf5-4977-aa07-e6deac60488b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8514),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8516),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9466d65c-fede-472d-b118-e5110f2693a3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8517),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8518),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "630d5562-2111-48b7-b841-292351f5b177",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8519),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8522),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "80250c54-558f-43a9-922e-5d28bc29ae70",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8523),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8524),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "be2137e8-f258-45d2-9aa7-0c4276eba605",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8527),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8528),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "27594f0f-1fb2-40fe-aa60-73171bc7c36a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8530),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8531),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b208ad10-64bd-4435-b0ce-224bf30562e5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8532),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8535),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4813c3e3-3d37-4791-a3f7-4e5b36eb7c6c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8536),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8537),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9247a79c-a28c-4d7d-b75b-a1fd16336801",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8538),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8539),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3ff41964-c40c-41b7-8319-f66975d593c5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8541),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8542),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e36ee5c6-30c2-45b0-8752-5287c717a1fd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8543),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8546),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "1279b1ad-9c81-489d-83ed-c4c4bd6ddfd0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8547),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8548),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "69d71b6a-faba-471b-822b-450511d9cb54",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8549),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8551),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "11ed7718-767c-4cdd-9c13-e9fec6c69367",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8552),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8553),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3e16b752-8f2c-430e-bc62-679b4c4e3f83",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8554),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8557),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "edc6fa6d-b43a-447d-b230-bb0b8f49e69f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8558),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8560),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a980eec3-4e95-49e4-b226-80a3de7edf1c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8561),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8562),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "6dd2077e-6851-443b-a0cf-4a43eb8a9c14",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8564),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8565),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "cd219308-1370-4e3e-93c0-6cd63e70e463",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8566),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8569),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "8492fcce-8f11-4782-884b-4059c48643a9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8570),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8571),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7bd22f90-2ef9-493d-b574-8ef2ba46cd38",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8572),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8574),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fc841fc3-46d4-4a13-b3b3-dadd008f9ee8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8575),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8576),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c18f9b7e-8691-4743-9265-059b2475ddbc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8577),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8580),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1a4c57f4-1a24-40a4-a0b7-2a8f693a017f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8587),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8588),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8937b742-752f-4139-9832-10e2e7ebeb5b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8589),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8590),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "96c6c83f-617c-4755-ba2f-ceacf057e3fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8591),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8593),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6fb54c8c-1fcd-4668-8a3a-870f03b531ff",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8594),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8597),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8d6786a6-a0ca-44fe-94a4-048943aa4ce9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8598),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8599),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6eab9c69-51a0-44fd-863d-416453825f07",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8600),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 28, 16, 16, 40, 932, DateTimeKind.Local).AddTicks(8601),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatHistories")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany("ChatHistories")
                        .HasForeignKey("ReceiverID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatHistories");

                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("EventHistories");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ChatHistories");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
