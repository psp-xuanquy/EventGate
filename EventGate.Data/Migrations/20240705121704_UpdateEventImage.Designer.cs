// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240705121704_UpdateEventImage")]
    partial class UpdateEventImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "c4773719-da98-48eb-88df-b34747590745",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4097),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4118),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "219fd8b6-01e4-46e0-b328-fd36d45f819c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4130),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4132),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "b76bd39a-a6cc-413d-9b64-e6a64e414eb9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4133),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4135),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "470b8eea-95d9-4f5f-ac60-7bd421397a5b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4136),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4138),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6585711b-b0b1-49dc-beeb-26a96228bd67",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4139),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4141),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f16589af-5451-4efe-821c-3dd15932f3cb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4146),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4148),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e616c7d2-1ba9-4cc7-a521-8f2d8689dd21",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4149),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4151),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "cb6e700a-03ba-4067-ba37-48765f66065a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4152),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4161),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "1962b7f2-bb90-42fa-bbd6-1ef42cbc20f2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4162),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4164),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "226c45f6-b6d9-440d-afe5-748c5e91c765",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4167),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4169),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "744bb2ba-0197-4be3-92fa-d11c67097855",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4170),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4171),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4eb4a5af-727f-4adc-9828-d05afcce6534",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4173),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4174),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "21a6cffd-dbf7-4df6-88d0-cdce2ded77d3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4175),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4176),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "0fb74ebf-e3b4-4d51-9056-caeb62f29ea1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4180),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4181),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4c1a326e-29a9-4e33-a7d8-47ad3ba66249",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4183),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4184),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "cec9ce12-cdf5-4ec0-ac0d-53aa88750a40",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4185),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4187),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d8f7d2bd-1316-4238-87a6-23c1f8fe3539",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4188),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4190),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a69f626b-35f7-4353-9f49-a5687eccd897",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4194),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4195),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "2479a391-128a-4e9b-bbf5-e07c5afbc6e7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4196),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4198),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "04b10bf3-3b6b-4093-9727-b9ab925a9603",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4199),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4200),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "95ac8456-9399-4d00-9681-af5f4c5ca601",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4201),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4203),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d4aa48d2-fab8-4395-935a-3e3be051c656",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4206),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4207),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9d7abc72-4f29-4c71-9f69-dc9ec37824a8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4208),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4209),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6dc94229-5b30-440b-bebb-eb34a2a8e0ac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4211),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4212),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "23af1159-1c3b-4c27-917a-aa460cfc8728",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4213),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4215),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "408006df-ac42-482b-8b23-c982e5b8ecb9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4218),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4219),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a8c412b8-ba1f-4776-844b-6a97e097ac8a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4221),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4222),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8a791849-de62-44b4-ba51-762af24c5d1d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4223),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4225),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "364c94a4-fa3c-48a4-b721-19a3b9ce8b9e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4226),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4227),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4102afef-f941-4adb-9a2c-2650ba9c47b4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4230),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4232),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9c6a6621-6e45-4d0a-8ca7-ef7269f57aee",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4234),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4235),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "63737557-a860-4adf-b444-9576f9a39708",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4236),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4237),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "cb511b3b-1c80-4a22-9ed1-aeb83f3a2bf5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4244),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4245),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "09116e3e-739f-499a-b7b0-6caba53071e2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4249),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4250),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d11ada23-1a35-4ea2-b2ed-74584ac80eaf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4251),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4252),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "42b08244-fdd8-4c5c-8838-7b4e3af2882a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4254),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4255),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "bb9d9a2f-d3c1-4eaa-a989-b7f171b6896a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4256),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4258),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8083c4cc-a2d0-4c1f-b51f-e5fd4fb1dc98",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4261),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4263),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0b7f747c-a968-4e73-bc27-93d87bee3e24",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4264),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4265),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5bcc8704-1e18-4e78-a17b-723b1e04ac40",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4266),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4268),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3edbbe49-446d-4f06-8830-16f8c696cb12",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4269),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4270),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "90a3a2ba-f03d-43ea-98b4-a2d5c3da30c5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4273),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4275),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "fb854fd3-0e77-4cd9-9f21-2dfca6e2b4fe",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4276),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4277),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8a9492aa-4b1e-4080-8fc7-1564bbf27266",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4278),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4280),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "dbf6d3d3-2963-403c-a648-5f1b3a853c95",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4281),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4282),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d69ea9ce-1417-40fb-9c00-8bedf1ff0d65",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4285),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4286),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "13770daf-bcbd-4367-b14f-3436014e079a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4288),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4289),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1152c0df-0fee-4506-a91d-444ebd699622",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4290),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4291),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "72546212-a6ae-4fc0-8edb-37a82340efc0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4293),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4294),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7f03e123-8e2e-46a0-8ae8-64ccdcf5d193",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4297),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4299),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a851f5dd-3816-4cba-9ef8-f7beb00c03c7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4300),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4301),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "76935bd2-8779-4d07-b1e9-ff5003bd4aeb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4303),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4304),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3a0179f0-9cfc-4ced-a04d-6978beb98a68",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4305),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4306),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2b729118-62ef-4a6e-8138-37a7d8546d2d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4310),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4311),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "673c03f6-a2d3-4dc1-8a3e-0bfa0c30bf48",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4312),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4314),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7209ecb8-2e1c-4511-b79e-3fb83ee164e0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4315),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4316),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6acfc822-9b0e-412e-af6b-17fed3169277",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4317),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4319),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1af8bfa8-1407-4310-befd-202f8c423856",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4327),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4328),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "518518d6-8eb0-4d39-84ef-53c8b7e21416",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4329),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4331),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4ffdd95e-e0d2-4770-ad3f-da82bd221974",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4332),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4333),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0a7bd15e-2c3b-48f7-a417-5c46858f018f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4335),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4336),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0210af6d-1bf1-4b02-b20e-15bc93047238",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4339),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4340),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "cc7f5d9a-e9be-48bc-b07c-10060d3b31d2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4342),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4343),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "bdf98e84-418c-4903-9a5c-0b0f13bb0d5f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4344),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4346),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "8a6226ac-3f0f-4816-889e-6435d169d083",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4347),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4348),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "08201bb5-3493-436b-9edb-97b61a58eaa5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4352),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4353),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f05caaea-9cc1-4bd4-93f3-2affab5ba95e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4355),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4356),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d22095d1-48ee-49d5-9abb-96332d6acb78",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4357),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4358),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "fa2860e9-564b-4edd-a594-5bc7cecee549",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4359),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4361),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "56d1603c-0a50-41d8-98b5-614fb8cf3e30",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4364),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4365),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "cbc58843-2f4f-4780-b7d1-3ff236e294cd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4366),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4367),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ef011558-218c-4433-94c4-459d6896a402",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4369),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4370),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3d04a182-a631-4462-a53d-524de5979c80",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4371),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4372),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "74cb64ec-97ac-48cf-9443-bce22f9c8198",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4375),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4377),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ded21d06-664b-4b31-aec2-03d626067371",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4378),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4379),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4ec18e96-d848-4bb4-9c34-70266ba1dcdc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4380),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4382),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "854ba8e9-a54b-448c-b4c7-286770ea24be",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4383),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4384),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ac213600-ee7c-4eba-8102-0b2a235a9dd3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4387),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4388),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3be18e7e-f7d6-4c2d-9a4a-3fba3588b865",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4390),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4391),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6c1913b5-a782-4766-a4fa-b67ac1fd4fed",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4392),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4394),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1eb30210-e350-496f-92fa-176e3773240a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4400),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4402),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3554e5c6-913c-4606-9f75-6622cec7c6dc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4405),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4406),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a48752d5-c5f0-44a2-bfe4-d429ae6324d7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4407),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4408),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "12507532-0cb1-4c11-bdc9-93efcf4c56c7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4410),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4411),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "37bda974-ecdd-499d-bf30-932b9af2488a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4412),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4414),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "91de2ccb-a0e3-4f8a-83de-015773c145c2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4417),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4418),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7cdd5bc9-5edf-495b-bcd1-a5b32d0fbb70",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4419),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4421),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fb88693c-8fb1-4ebd-9f3f-1c1072e51c30",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4422),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4424),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "48b2c635-fa2d-4a70-8432-b97dc169aec5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4425),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4426),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7e4859e3-0e0f-4aec-ad1a-fdce0fa536f1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4429),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 5, 19, 17, 2, 535, DateTimeKind.Local).AddTicks(4430),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
