// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240626174022_FixForeignKeyIssues")]
    partial class FixForeignKeyIssues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.HasIndex("UserId");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TicketDueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventID", "ClubID");

                    b.HasIndex("ClubID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PosterImage")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "3a099e89-a107-4af2-a209-540c186f1c8f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4558),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4579),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "849a1462-9789-40a9-9c73-4de25d3cbe09",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4588),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4590),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "60b5eaec-15a2-43c0-b0d5-3a441b40f51d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4592),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4593),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "19f64797-c628-4028-b52c-e82714228192",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4603),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4605),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0276b102-314e-425a-8c64-2b2769bf9128",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4606),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4607),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "4eba50af-f8b0-4def-bff6-a94dece529c9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4609),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4611),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "b328a776-2f17-498f-a944-bf191bef7443",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4612),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4613),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "045ec21e-2598-4a3b-aa4c-91e2bff7ba47",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4617),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4618),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f1a331ab-7e2e-4bed-92c9-67cc75afb0ff",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4619),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4621),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "73319d47-21ab-458d-9ddc-0908aa903b6b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4623),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4624),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5324288d-c001-4f04-939d-7db083fd75e8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4626),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4627),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "24798107-e475-4c82-bce0-9c72d9ec840d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4630),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4631),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "cde3b048-67ed-48d1-a0b2-7f54b4a59768",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4632),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4633),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "aedc7734-3c84-46ae-8342-d819d3cf5799",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4634),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4635),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "b5b6c9c8-e498-464b-9ff8-331be3751438",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4637),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4638),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1811e272-9c05-435d-9523-5b549ac4f0c9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4640),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4642),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "46a908b4-9056-4c64-9f47-49413d8ee78b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4643),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4644),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "24106b06-7e04-4bed-b3bf-f1e4a6dceab1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4646),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4648),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "a35d4734-63cc-48b0-a32c-125b12053bf7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4649),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4650),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ff658cb8-cbed-4890-a917-e86fc9b79808",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4653),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4654),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d29fcd10-f217-4992-ba99-28286ebd0b07",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4655),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4657),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "5daf8dda-5fdb-4e2f-99e3-d6dd8db94e77",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4658),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4659),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "00316c3f-8ba5-4611-9c81-48e764b80174",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4660),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4661),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "85a40efe-b36d-4dfd-acaa-f086086697e9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4663),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4665),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a6d49bc5-d08b-42dc-9b7a-5743385d68a2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4673),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4674),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ee14333e-6bb2-471e-8845-e273184c8806",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4675),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4676),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9b5ad7bc-88da-4b2b-8eb0-deb41c3ae595",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4677),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4678),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4b17c5ec-ab98-4445-9736-731a636a53d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4681),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4682),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4a893336-b4c3-41f9-8e97-eeff17fd0129",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4683),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4684),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a90c1053-355b-4bd6-ad9b-66555228bcc2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4686),
                            Hall = "HallA",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4687),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "53bbf7b0-1ae4-49a4-8a39-ac7642631884",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4688),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4689),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "b8995ba4-c8a8-4012-b78f-028e610ec739",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4692),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4693),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "68bba113-d11e-464a-87b5-cff36af5abee",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4694),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4695),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e713c746-da09-4580-9bc7-7a58280e2789",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4697),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4699),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3f24e65f-1571-466b-933e-c7b4e770b1e1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4700),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4701),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "fcd100bb-22a0-4590-8546-f7a7c55d0b92",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4704),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4705),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2b5a933a-43bd-45f8-ae3a-f5910fdd85ee",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4706),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4708),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3289be36-0cd4-434e-b144-0c2ade920338",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4709),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4710),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "97794dcd-2e58-4882-96fe-0759601b99d8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4711),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4712),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "744a7b79-da76-406e-a77c-e0b45c51e190",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4715),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4716),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "65d83eee-9e04-4d3a-9f7a-954f287cd4b7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4717),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4718),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b0d00567-21fd-4774-ab17-3f4b44795841",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4719),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4720),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "be805dc9-b5c6-498c-abd1-c916e0102e54",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4721),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4723),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "57431a57-4724-44f2-9d26-df5f7a132292",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4725),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4726),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "587fd681-adde-4d04-8c30-37a6647d47be",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4727),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4728),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3e10040f-4412-4575-a05a-0b62f764a6ab",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4730),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4731),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f903a31c-da2f-497a-9172-82a6fa12d60d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4732),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4733),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c3428312-455a-45c7-9595-242115bca019",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4736),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4737),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "225a196e-fd28-4d6a-ad9b-9b1cb0184f82",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4747),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4749),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b338caee-1bb9-48ce-ac55-cc07a0bd9a7c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4750),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4751),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3f883576-6ec3-4141-845e-c7860ef47f9b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4752),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4753),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "175e03b7-fbb0-418e-be95-3fe819ed1df6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4756),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4757),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "218a6214-d403-4cbf-8186-2b422cb2c730",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4758),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4759),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4c78b929-98ad-4101-9f21-a672169b6336",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4760),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4762),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c2041405-eca6-469a-990f-bf5e64fd715d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4763),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4764),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "76b92ae0-8aaf-4e6f-8053-e545d6454c2e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4767),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4768),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0ebad0c0-3467-4c93-b0ed-0ce8cdf705e1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4769),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4770),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6f6b7215-baae-4ade-aacb-0cd2da36f418",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4771),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4772),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "c1ffebef-6d8d-415f-b3bf-c6e8bc71f60e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4773),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4775),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "325067fc-ae41-4621-9de8-9dac29a1a9b6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4777),
                            Hall = "HallB",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4778),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f5d383d2-6ec2-4800-8a4a-9dbcf76de57b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4780),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4781),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2955160f-9751-4504-a285-f63bfdc5bb86",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4782),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4783),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "342f07d7-5cb7-4172-9f0a-cfacc60aa801",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4784),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4785),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e4ab25d2-369d-4ced-8380-cd4ce9775953",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4788),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4789),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "224162a2-c8a0-44d5-9003-fcd7c8b78dd2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4790),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4791),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "95225c07-1edb-4208-a623-d470e30f2bac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4794),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4795),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e0182782-5148-49ad-8256-e1718d6a7def",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4796),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4797),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "869f6401-778c-4096-a324-2143d7329a71",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4800),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4801),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6e3827a0-9d6c-402e-9d0f-3fdb8324e899",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4802),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4803),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "bd1957de-4b53-4ab9-9f8e-7a0c50453b3e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4804),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4805),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "11ae4fdc-86eb-4ef9-addc-677e7beb4efb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4807),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4808),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b2d556f9-9909-48ea-82b5-aa954bbedc9b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4818),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4820),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "63f7c52b-14f8-433a-93a2-42078602356a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4821),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4822),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8e242e48-78ce-4150-99fa-4c6544a9b198",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4823),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4824),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ca66207c-cfd5-4f33-a2f4-8aadde55e9bd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4825),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4826),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8026afac-1f6d-487c-9f22-a1e0fd0b5b93",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4829),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4830),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8459f734-7834-4ef5-a800-833e370154aa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4831),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4832),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "63c817f0-25a0-4cb6-9ef4-b78225454d92",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4833),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4834),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3e363e21-e978-4130-af83-178e7676b4dc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4836),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4837),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "f147efca-9bf2-48cc-9ee3-0dfa79ddcfaf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4839),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4840),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d5ba81d2-f9dc-4fc4-b05a-4603be1fb0df",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4841),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4843),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "623f70b4-adce-4e7f-a24f-aeb1123d9d33",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4844),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4845),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "95812913-7b07-4a55-9543-5b62a8cc0a4f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4846),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4847),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9abd1c12-bf9f-4fe9-b2c5-411791a1a080",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4850),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4851),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "58b34551-d3fb-41fa-805e-1e5133116419",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4853),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4854),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e870d643-0934-4a32-93f3-b302365a345c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4855),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4856),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "c407e9e2-71cb-4b44-8d35-1760c75fcba4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4857),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4858),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "944502a2-350d-4b8c-b713-dc42c734ebf4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4861),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4862),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "644674ec-1221-4784-b05e-0f3358beacdb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4863),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4864),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "ca4d0373-ccdf-47f8-aea4-1b1affa1579a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4865),
                            Hall = "HallC",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 27, 0, 40, 22, 375, DateTimeKind.Local).AddTicks(4866),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID", "EventID");

                    b.HasIndex("EventID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("EventID1");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatHistories")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany("ChatHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID");

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Event", null)
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID1");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("EventHistories");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ChatHistories");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserEvents");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
