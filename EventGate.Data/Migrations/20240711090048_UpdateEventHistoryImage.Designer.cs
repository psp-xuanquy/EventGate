// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240711090048_UpdateEventHistoryImage")]
    partial class UpdateEventHistoryImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID")
                        .IsUnique()
                        .HasFilter("[TicketID] IS NOT NULL");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "d74dc52c-0fd5-41b0-9b11-b3e2f7c95c45",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(954),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(985),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1ae2245d-ed52-43ab-8a98-ad3711e8e4fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(993),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(997),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5fb95430-d3ff-492b-abeb-bb5e9cdfdb3e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1001),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1004),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3ee95e0c-d5cd-4eea-a623-65ece0df7a70",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1007),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1010),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "4911c645-ee85-476f-8470-e2d54a595eae",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1019),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1022),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "765f33d3-91b9-4f34-aa73-1ae15627ffd9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1028),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1031),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ee500f69-8a24-4411-b373-a0a18bfabb4f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1034),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1038),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3b62e054-14b7-4c51-b315-8947ffa4d501",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1057),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1061),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "aad103c1-6463-4437-a541-53951fe9ff3e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1067),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1070),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ee5eb57a-f13b-41a5-ab8b-c9aeabe46e33",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1076),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1079),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "48974f66-d609-40bc-91af-029a5dfd5484",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1082),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1086),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "00948430-a0d8-4803-a698-35ddcabefb6d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1089),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1092),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0315ebca-5e2d-4386-9ef9-ac490fd8bffc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1099),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1102),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7348af2f-6382-4696-8bb1-2971907f086f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1105),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1108),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1a649a43-c026-48d5-821f-1cff31ae9c09",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1112),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1182),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "2b8fae7c-3692-4476-b70b-4cfb7eebf2eb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1221),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1225),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "54ed8f1b-cb21-4551-ba78-c6cd6966d9c6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1232),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1235),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ad421c35-1ac3-45f9-9217-65a1fe97974e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1241),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1244),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3ef5c0ef-ae20-4b7e-a434-a71de602d7b8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1248),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1251),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "233f4bb0-c7fc-4d8a-abf5-fcb0c2b3f873",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1254),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1256),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "2041d859-8bdb-4264-aab1-0005f8ba306d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1263),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1266),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4345fcb6-db5a-4174-a020-21810fb9b409",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1269),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1273),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "210455ef-b7f4-4696-ad1d-9c23cfa0acf7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1276),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1279),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "52ef469b-d00f-4cbd-9fb8-c8f74584a629",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1282),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1285),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c466b678-f3ea-4e2f-9f2e-fc33706af042",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1291),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1295),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e6fb8a33-7370-4c2b-8954-ed3f567e006e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1298),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1301),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8e81c890-1bc8-4f3b-a683-7415775e1e98",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1304),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1307),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2eec5ccf-cdfc-4f12-8bd6-674cfda9dbf9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1310),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1313),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "befd98ef-c8ba-4025-a262-f85895855613",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1320),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1323),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "589e41b2-ab90-47ee-a3f0-509930e0d408",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1325),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1329),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bab4bf6e-0224-4278-8422-c820b64f690e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1333),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1336),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "896b086e-5610-455f-98f7-a12f032cf9fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1339),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1343),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "aff97a9b-b854-4ea3-bffd-22d775d83ee6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1349),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1352),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "afb4ecf3-d1cb-4155-94a8-3b30629d7d46",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1358),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1361),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "940bc3bf-a802-4554-9a61-72c94615fa6f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1364),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1367),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "db85b9c3-3328-4e01-b8c3-aa4de038e42a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1371),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1374),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "564dd14f-5990-4a34-989c-f807f89f4477",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1380),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1383),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "40546644-5ca5-444e-ad5c-b68462d034b1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1386),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1389),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9b13acdc-ff16-4504-9de1-9d0f136f681f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1392),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1395),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "bc4563e0-132f-4f0c-b63b-14034ce821d6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1412),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1415),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0b1bfee0-6889-4578-b7ef-61e93578712f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1421),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1424),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ad74e50d-d96c-4de7-a4a8-0a4e76793fed",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1428),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1431),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "c31305b6-5f30-4b59-a7d1-21662c2d1620",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1434),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1437),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "0dd542d8-a0b0-4083-be28-165b5f5d091b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1440),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1443),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c420999b-0fa4-45dd-a367-557449504fcc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1449),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1451),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f7da9345-990e-4f9c-a1de-29910b2eb6d5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1454),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1456),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8c533707-2c0f-4d76-8a5e-8feeff65bba7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1459),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1462),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ecd96bfa-fced-43d2-973a-78fa0c1aef66",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1464),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1467),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "b11c8556-2f90-4ecf-b64d-194874f49268",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1473),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1476),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0fb81e38-8ee8-4a33-b33d-461ca92d0c27",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1479),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1482),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1cc4c6cf-ecc7-4316-9769-fa45a1f9137b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1485),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1487),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "db8a8007-9398-49af-aa2e-573d5410fbc0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1490),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1492),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b0b94156-ae00-4948-be4d-49b0e72c07f9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1498),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1501),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "97cf72c6-262f-4e9b-a31c-6df0cd36faf0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1505),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1508),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d677a0ea-3ea7-45ae-b062-56155e76a539",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1511),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1514),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a24ebdaa-7001-4e7a-b6d4-58eb3fc8c438",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1516),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1518),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0ee369cc-3801-4f40-a440-db4df284bfb3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1524),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1527),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "32ea8e99-e9a2-4534-8846-18c78ca78f81",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1530),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1533),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "44b5f4d1-f6d8-48a0-b58c-b38ef6bfda6b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1536),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1540),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9d6d8a93-6626-46f1-bbce-316e3645aba1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1543),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1545),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "794a8261-5b14-4b62-869f-a2a086b7c06a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1552),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1555),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2ab9e3d0-6d9b-44b2-a713-15254bdda2d6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1558),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1561),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d33aeaef-855c-4460-9149-4f48285ce07e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1565),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1568),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "002117e3-cc73-4bd0-b166-1cde945d8dd2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1571),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1574),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5fd2ff87-fe0a-431d-b54e-f0cc5d12063d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1581),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1584),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7f0f3916-551d-4cf6-9b55-7414f37f9f85",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1600),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1602),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "89690df6-25d8-4481-bfea-cb81cdb16a1f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1605),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1608),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0cf0f850-ba28-4a19-a95c-a6cfc8698185",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1611),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1614),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b9947e4d-dd96-48f7-8b27-06dee648b0f2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1620),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1623),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "fdfef609-0b86-4c9c-b091-68f7e9f4eb8b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1626),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1629),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "86d90c16-4f1c-4c1e-bc27-3ff51564728a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1632),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1635),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "16b2fcd0-4439-4253-9cf7-299e90ba5d3d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1639),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1642),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "833888d5-9689-4544-9fc2-1ca2e1ed7246",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1647),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1650),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "23de9a5e-b8ae-4872-8184-0385136aeb8d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1654),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1657),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7c989623-ee1d-475f-b271-d2e5d51190c1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1660),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1663),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "378de676-354c-4b9e-93f1-7b052eb47b52",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1666),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1669),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "93ffce73-4c22-45a3-a2b3-73dab50f8d54",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1675),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1679),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1ea9b674-29a3-40ec-bdcc-1586f3b8c36d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1682),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1685),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "eadb74dc-f917-4f18-9207-1f5a2ed8688f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1689),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1692),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "5d38d732-8fac-4882-bc42-e1aa101475d2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1694),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1698),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "ed8bae60-68a5-4c78-8eb8-dbe877724e90",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1706),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1709),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3fb3567c-b219-43ba-9b74-697ecd29a7db",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1712),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1715),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0314e1ba-34fb-44b0-bd78-c80d11eec490",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1718),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1722),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "05fc2427-a659-4840-9908-c7d5c17681b8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1724),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1727),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9287ee76-aa13-41e2-a264-419fcf9bf416",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1732),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1735),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "55b3db02-75a9-4406-96c7-25b9fef7407a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1737),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1741),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "63943772-0a09-4d83-9d01-a9feda276e92",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1744),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1747),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "59726126-b46c-47cf-8710-f9167db14bf7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1749),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1752),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b89749db-8921-4915-9a6d-918e73f45983",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1768),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1771),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "54dd8d68-bc68-4e28-9655-871db26a4284",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1774),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 11, 16, 0, 47, 590, DateTimeKind.Local).AddTicks(1777),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithOne("OrderDetail")
                        .HasForeignKey("EventGate.Data.Entity.OrderDetail", "TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
