// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240709172834_UPdate")]
    partial class UPdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID")
                        .IsUnique()
                        .HasFilter("[TicketID] IS NOT NULL");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "c4429c05-75f9-4508-90f8-893d5c897a6f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(967),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1005),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "efd241d7-f5a4-43e7-b45e-b79593cbbd81",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1010),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1012),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f02bea79-4ef7-4f47-92d3-a093577e8826",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1014),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1016),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a87812f5-ec25-48ef-b6dc-80b55faa54db",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1018),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1020),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "b0ff8242-86ae-4a67-9a20-b3e5961fb49e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1022),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1027),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e9c4712e-d35a-4ba2-a848-f75c39d01f03",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1030),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1031),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5cee25f4-1d96-4ad8-b5f3-26893af8257a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1033),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1035),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5628a993-0a0a-486e-89bb-cc9899f452b1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1037),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1039),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f10cb2a8-a45e-405f-88e4-27a1ab4e67ac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1041),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1044),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b27b6e31-2ba9-4dc8-b1c7-41975700976d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1047),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1049),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9664d3e0-5e39-439f-8d00-765b388b0f84",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1051),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1053),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8b9601f4-29d9-46a8-8e67-3e6ddc153343",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1055),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1056),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4651b10f-9797-4886-96b4-bea8aba5f5cb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1058),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1062),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "fd003ca7-7911-4102-94eb-c750ec99f4f0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1063),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1065),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "6ad23ed0-32c8-4084-9d35-b35d223761b3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1097),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1099),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "cc38ae1a-3186-465f-b644-3a29b8f085a5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1101),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1103),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "9e87df58-e640-4ff9-b0c7-9fd6fa208c3a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1104),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1108),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3a6036c6-1214-48a0-b4d2-333b67c6fc1e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1110),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1112),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e82d5778-c9a8-4dbf-bb58-7b7ad9aa18e5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1114),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1115),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "7665e4fa-5285-4cc2-9448-b550dfb48779",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1117),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1119),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b0d90152-9bbe-4ca4-8652-272c36b5058a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1120),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1124),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d7a312ff-018c-410e-8227-97b52dbd860f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1126),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1127),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "5fe7f943-ea36-4601-aaa3-a7cd21b942c5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1129),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1130),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e8eeeab0-d1d2-4ad2-b69a-7e0233919960",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1132),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1134),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "85842c71-8582-4ce9-9eb9-79ed480cf2ff",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1136),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1139),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7f6c78f4-339b-4bbb-a9c3-551eaf0e3d2b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1141),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1142),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "a02dc250-4215-470f-929d-52091fe94cb1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1144),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1145),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9f948d35-49ed-4041-899a-85838db17169",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1147),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1149),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "791c0aa8-43df-45bb-84ef-2ad9157a7b2f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1150),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1154),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "f2ec8174-cb92-4477-bea7-bbe2c16804e7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1156),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1158),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e282dab2-985b-4f7f-b2ec-90181478b268",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1160),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1161),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1d53f929-9507-45f2-9e51-9228d5d8f6bd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1163),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1164),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "273564c8-5b3f-4e21-a023-24b5eb737806",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1166),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1169),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c9595e35-e884-400e-a16c-05995a9bbe23",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1172),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1174),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2bb195e5-bf5d-4070-b8b0-4a2569f04800",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1176),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1177),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ccc1b319-92fc-431f-a7d1-48042e2bef39",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1179),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1181),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "4dca5b9c-b331-412d-967a-0787ca0f2cd2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1182),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1186),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "d8cbe0c5-132b-4125-a8c5-fe0c237a221a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1187),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1189),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a57ffb44-33ff-4bb9-8b14-bd5c3177cec5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1215),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1217),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "017462fa-bc87-43e6-8838-f38a10d05329",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1218),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1220),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6830d9b5-030d-4823-b28b-87da47bb088c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1222),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1225),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "7ee94764-ee53-4a76-b78b-e3bdde7ddb6d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1227),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1229),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "84f1148e-0fa4-45f5-9897-f9b9e8ec8b65",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1230),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1232),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "560214e2-d3fc-4b39-94f3-288860eb546c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1234),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1236),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "cba489ac-bde5-4424-8634-d827f986421b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1237),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1241),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "17cb59c8-f938-4b1b-839a-8bd0b6b810ed",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1242),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1244),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c51f4ee4-6b9d-4e83-8016-391e08727e9c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1245),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1247),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f1094dbe-aff4-4193-879b-dda3840f631a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1248),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1250),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "7754ea48-f376-4c89-989e-cf3168f973ad",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1252),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1255),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1ed711ee-ae47-49e4-8b2a-047985dfc257",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1257),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1259),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "32fb8df2-2936-45c8-865b-a3e164e35f94",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1260),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1262),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0da20e3e-2827-4f07-9213-161bd6139e86",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1263),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1265),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d31df723-e8ce-40a9-91eb-10029c23be47",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1267),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1270),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "34752f29-6d9b-4c38-98d1-0eb6f4a74d02",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1272),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1274),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "19a564d1-18b3-4702-8778-12131f8dade9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1275),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1277),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "c5699d40-61a9-4127-8a82-5770f86abe53",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1278),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1280),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b4b93e01-2bab-46a4-9921-550de75f9359",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1282),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1285),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "9cea23ba-6480-48c9-a649-a5cbad4e57ed",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1287),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1289),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "34cb832f-4f0e-49ea-9442-908b9befea45",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1290),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1292),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "96b41388-ba08-40eb-af3d-e59b3d1f885e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1293),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1295),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "72091ec8-3bb8-4523-8252-f98f0d8158b7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1297),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1301),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ddfcddf0-deb0-4294-8828-e4da07eac0eb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1302),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1304),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d7464828-7f66-4f86-bdb1-02f24d11f5aa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1305),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1307),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "80b1b25b-178f-4b63-a7b1-5c42982ffc81",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1309),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1311),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3ab37011-7c15-4f15-ab70-b2b930a133be",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1341),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1345),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "61298f57-df89-4cbd-975d-f893c13c5ad2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1348),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1350),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ab18fde3-500a-48bf-a0c0-848d39021515",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1352),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1353),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "8ad68366-a7a0-42ea-b279-fc2d373e63e3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1355),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1357),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e272a746-e273-4df2-86d5-d46f87d395f3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1358),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1362),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "18096152-cad6-480e-a6ab-4b78bc4aa1d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1363),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1365),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5983636a-b1ef-4ef7-a4bb-e1b69ab95177",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1367),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1368),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "dd87932f-6990-49d5-b904-bde8ea9d3701",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1370),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1371),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5d55ba11-0496-4915-8063-e0937b41ac93",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1373),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1376),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "0df965d6-f690-4d6f-b608-e18cedc1a1cc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1378),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1380),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "954506a8-4f26-44f3-bc44-2b35aa8f0284",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1382),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1383),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "aff09990-6b1e-4158-b7b5-24aba9323a03",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1385),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1386),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "3f861ae3-8169-4e10-901c-b93a75804162",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1388),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1391),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5e2d4941-04f3-4ddd-b32f-79dfe1385fdc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1393),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1395),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "326bb943-c217-496e-9555-24575b451a54",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1397),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1399),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "f9c7f81d-3c0a-4e34-bc63-49f4210c813d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1400),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1402),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1f459f92-3848-40a9-8d50-2858327b24a5",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1404),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1407),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "966a5d1a-43f9-44c0-b69c-8d105fc88912",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1409),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1410),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "18596309-0846-43b4-a30d-d075cacfd988",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1412),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1413),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "03291f8a-b960-4589-9638-5dd69e03a321",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1415),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1417),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "465c85a8-8a78-4df2-adec-9262eb6ff68e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1418),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1422),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6086b533-864e-4060-97ea-8d9977178dd1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1423),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1425),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e532da40-ad93-4f97-b4e1-612335d2e4ab",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1427),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1428),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8da88bd0-723b-45ef-a6c2-6f9cd9b5d736",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1458),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1459),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b416c949-c423-40d5-ac2b-43dbf5a7076f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1461),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1464),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "8c95443b-ee00-47ae-8901-6eed4a305774",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1466),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 10, 0, 28, 33, 463, DateTimeKind.Local).AddTicks(1468),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithOne("OrderDetail")
                        .HasForeignKey("EventGate.Data.Entity.OrderDetail", "TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
