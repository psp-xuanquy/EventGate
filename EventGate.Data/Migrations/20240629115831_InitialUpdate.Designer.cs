// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240629115831_InitialUpdate")]
    partial class InitialUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatHistoryID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.HasIndex("UserId");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "eafde119-0717-4f6c-8e41-f1bb06381b1c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7204),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7233),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "f924ffa7-28ac-4817-9201-fb3f18ddf2a4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7238),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7239),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "adebc06e-b408-4966-9748-7b15159f835f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7242),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7253),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "6521f633-f1be-40bb-bf0d-3ad3a2cd2eca",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7255),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7257),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "0c47a725-9ad2-4596-82f1-b6e4e1694637",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7259),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7260),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "46b94b13-3885-44c7-a62e-eb6c3909a25f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7263),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7265),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a59d73dc-edfc-42ca-958f-5339ae1182b1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7267),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7271),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0d542d66-608f-4d5c-a5d9-87b3569c8130",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7272),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7274),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6ba12bac-b081-40e6-a1cf-93db6bc80a96",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7275),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7277),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "dc862e62-14a2-4ef7-ab8e-c5ee0e1e1262",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7280),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7282),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "2a532458-ed20-4aea-837a-4eb7d6642f10",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7283),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7286),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "af8f400f-ccfb-4b8b-89d4-77ceb64391e6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7288),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7290),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0b512794-4e98-4bf2-b7ac-22d5aa4c856a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7291),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7293),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d5bc59a1-9449-4e99-9e92-a6ec0719053c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7294),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7296),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "c9e24e58-d666-4741-89b8-b650543402e2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7297),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7301),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5899c31f-10ca-4805-9b67-0b70acd34082",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7302),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7303),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "33936567-3c28-4859-b22b-9d5abe331331",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7305),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7307),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ed9d51fa-395e-4c55-b7ce-b2703811f28f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7309),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7311),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "1ca32687-09bf-4266-a347-d40069585180",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7312),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7315),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4572613d-7b57-43a6-8270-71b1fba947f8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7316),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7318),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "c1881a4b-d90b-4339-ab01-f62d7f576b6f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7319),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7328),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d2825613-15ef-461f-97ed-b3d676f17cbe",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7329),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7331),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "259720de-cae9-430c-9dd0-99b08d32de6e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7332),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7335),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d8a9fcb3-960e-4759-ac01-9e925f7d0def",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7336),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7338),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "1c51ad9b-43ba-4b62-bf33-83861ed888ad",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7339),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7340),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "4901508d-0037-4853-9d83-2cb8721e003c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7342),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7343),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b1b821be-0048-454b-9b4b-2aeffad4b688",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7345),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7348),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "df1698c9-13b6-4270-852c-241b82c106ba",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7349),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7350),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "7c64dc88-5e78-4ec4-b802-8cb1b2788c71",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7352),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7353),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "42765655-85a7-43d6-82ec-cbbfc2588bc1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7355),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7356),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "0cd0ee6c-855d-4c6a-a2a1-64fa32a33f76",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7358),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7361),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "9f434373-8bbf-46e7-982e-65068b5b4e52",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7362),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7363),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "90b909f3-6850-4ff3-8c57-521ecb672de6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7365),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7366),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "07c2a7c3-167d-43ce-ae4f-04084148019d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7369),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7370),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ed406954-a466-4ac4-9a74-c7702e62028d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7372),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7375),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "44353e77-e9da-46e6-a41b-5a0cd2c4386c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7377),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7378),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "38c378c1-9ada-4fd4-8161-e50151d5d7bc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7380),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7381),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "cf2d3a0c-ca50-4fe8-9541-b123613ba856",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7382),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7384),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9bc5b737-28b5-45ca-926c-52ecaec18b01",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7385),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7388),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "3c369a13-4993-4e59-b90c-6484f37f82c6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7389),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7391),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "fc49c9ca-1877-454d-9853-234e87fd11f0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7392),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7393),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "6c55ecf8-5f25-4069-acff-41a477fd54d4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7394),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7396),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "f9693f5e-dc4a-4b8c-801c-09d24081e0a0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7397),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7400),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "373806de-9cd8-43c9-82c9-37a399426af0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7402),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7403),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5f69ea70-f395-449c-b302-416c117ff9c6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7404),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7406),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d70af112-5d2d-40b5-84f4-365c1a60a6a6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7420),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7421),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5f6671ff-1bf3-4fa5-ac23-c46cd775eb72",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7422),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7425),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4de1b650-0181-416a-8bf2-52ef2178f8bb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7427),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7428),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "76a2475d-f8e5-4db7-88ea-5bcfbdbfe28c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7430),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7431),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "209dbd61-32ec-43ed-a229-e846592a334b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7432),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7434),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "198783df-c6f6-4036-b049-66cf9bb88cd4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7435),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7438),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "15e9c2a9-1236-45bc-8d7a-b14274b61c01",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7440),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7441),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "93161c0e-f633-4416-8b7c-8acb980e22b1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7442),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7444),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "9e748c79-5375-4ad5-ae44-4302e38f1979",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7445),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7446),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "30f3cac2-360a-43bf-b995-97ef031edfbd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7448),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7451),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "96a78324-427f-4923-8975-c5560d4bffaa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7452),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7453),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "bb81ff69-cc2f-47b6-8034-0ff7f5f83266",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7454),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7456),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "cbd1558a-48a0-4208-8efd-db2892bdf4c7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7457),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7459),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "fb6d8904-85fe-4914-a3c8-646de5817894",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7460),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7463),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b49fba07-f362-4c9f-b09a-94cccc99c7a3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7465),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7466),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "b8da574d-6a03-4b57-8c94-87af4f1f2611",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7467),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7469),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "bb72ebeb-99fe-4109-8bec-1285d4d52314",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7470),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7471),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "5d8f5e25-e04f-4ca9-94fc-9cea6bd06b7c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7473),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7476),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1efe51a5-27bc-4430-bb49-d2a1d0904a2b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7477),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7479),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d4246a03-face-4f45-acf8-b3c5c9c0b24e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7480),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7482),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "18265294-4990-4645-8db4-f10ae207e8ad",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7484),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7486),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "efc0a10d-ac53-497f-a20b-2a8470fa9906",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7487),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7490),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ca01c6df-ad46-4500-b278-2f52d44a93ac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7492),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7493),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "75615485-1c6e-42ad-b15a-e10608895c02",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7504),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7506),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "a48c324a-9cf2-4a5a-8801-d08656f5575c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7507),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7508),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "daa1ca9a-6cca-4268-8503-c2812ab4848a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7510),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7513),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "1dc50203-742a-46a6-add9-7c4ad5db4675",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7514),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7515),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "1c5ba7b3-bc02-404b-b7e4-8f8e7f96cb94",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7517),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7518),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "bd234dab-4f6e-4de1-ac59-10cf595d110e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7519),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7521),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "41f999d7-73f0-424d-8d49-a7f914be47e2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7522),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7525),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "11b796b7-d7fd-4307-bff4-faccb41fa00a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7527),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7528),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f1d43f28-b422-4db5-86b7-e393a15a240a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7529),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7531),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e3199cdf-d34b-4e35-9ac8-f2b51902cba6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7532),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7533),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "548c20b8-358e-4f8a-9f3c-720b397caa2e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7534),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7538),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6b343dc2-124b-4fe8-9485-4d8a1cf0312b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7539),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7540),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "8782c7b5-a980-44d5-a824-7cec6461d9d1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7542),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7543),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "b18ed097-42a7-430a-9495-04a83da0e1d7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7544),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7546),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "0bab52a5-3490-4d32-952f-f71e511ef5e4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7547),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7550),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a97fa834-a878-4e7f-b66a-01f46e2ceb21",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7551),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7553),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "4d53209e-2745-4bf8-8ad7-af0fcb5a621e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7554),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7555),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "6147b8cf-3b5a-4a98-8726-0e46238b667f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7557),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7558),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "62a23999-c728-4b5c-86a7-cb838d96f0af",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7559),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7562),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1e329ea4-87e8-46fa-9f7f-d7850bc6553d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7564),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7565),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "cde2edee-2a6f-4082-85db-4c10cd7d36cf",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7566),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7568),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5f461ea8-f118-4407-ba05-034ade09d09c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7569),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 6, 29, 18, 58, 30, 776, DateTimeKind.Local).AddTicks(7570),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventHistoryID");

                    b.HasIndex("EventHistoryID");

                    b.HasIndex("UserHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatHistories")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany("ChatHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventHistory", "EventHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("EventHistoryID");

                    b.HasOne("EventGate.Data.Entity.UserHistory", "UserHistory")
                        .WithMany("UserEventHistories")
                        .HasForeignKey("UserHistoryID");

                    b.Navigation("EventHistory");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatHistories");

                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("EventHistories");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ChatHistories");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Navigation("UserEventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
