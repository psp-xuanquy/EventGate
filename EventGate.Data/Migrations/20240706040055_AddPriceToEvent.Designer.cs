// <auto-generated />
using System;
using EventGate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventGate.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240706040055_AddPriceToEvent")]
    partial class AddPriceToEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatReceiverID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("ChatReceivers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.Property<string>("UserChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserChatRoomID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EventID");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("ChatRoomID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatHistory", b =>
                {
                    b.Property<string>("ChatHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatHistoryID");

                    b.ToTable("ChatHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Property<string>("ChatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomID");

                    b.ToTable("ChatRooms", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresidentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClubID");

                    b.HasIndex("PresidentID");

                    b.ToTable("Clubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.Property<string>("EventClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("EventID");

                    b.ToTable("EventClubs", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EventFeedbacks", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.Property<string>("EventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("EventHistoryID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("EventTypeID1");

                    b.ToTable("EventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.Property<string>("RuleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("EventRules", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetails", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.Property<string>("PaymentsInfoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentsInfoID");

                    b.HasIndex("EventID")
                        .IsUnique()
                        .HasFilter("[EventID] IS NOT NULL");

                    b.ToTable("PaymentsInfos", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.Property<string>("PointID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointID");

                    b.HasIndex("UserID");

                    b.ToTable("Points", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats", "dbo");

                    b.HasData(
                        new
                        {
                            SeatID = "56c23027-f68e-468f-a6cc-6599f9e34115",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1038),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1067),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "d5a06152-805b-4353-8774-eacd727c6f24",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1071),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1083),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "8254a41c-c88d-4f03-a8e3-92d24a75abd9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1085),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1087),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "3ad2632e-65c8-4082-9d41-16fd7d2fce67",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1088),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1090),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "14329b96-d271-45a7-8deb-186ea8155b3b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1091),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1093),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a6b4f65d-88cf-4686-a44c-d44c49f8e63a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1097),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1100),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "c5026618-88f9-4d2c-93d1-2469a9f86e77",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1102),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1104),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "653b3f4e-ed11-4848-bfba-6a298572a9ac",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1105),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1107),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "9f682f1f-1bb4-40bb-9f25-6b53cb91dd52",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1108),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1110),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "462c0d80-1167-4878-8051-6cbb5a503642",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1112),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1115),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "0b2a9b06-89af-4f51-9dd3-7a78a8859b83",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1117),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1118),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "c7a8fdb0-458b-4836-a909-2cf530d328b4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1120),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1121),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "45e5301a-f02d-416c-b6be-acb3c255b6e6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1122),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1124),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "bb7ec23e-9d2c-4526-a62d-3ddad76f3117",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1125),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1128),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "d351514b-87fd-479d-a36c-134c9879ee1b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1142),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1144),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "b4d9d28e-8342-45ae-8f3d-c54d0282140a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1145),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1146),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8ee3a14c-cdc2-42a0-b0b3-a8a727151435",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1148),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1149),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "f6c98e40-d172-4c21-8463-67db86f70a4f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1151),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1155),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "8f71b71f-4614-4fe4-99c6-7bad93f6d1b1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1156),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1157),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "fdb38f24-c506-4f7b-8dff-d3ab5b50c8a7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1159),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1160),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3a3cad8f-2769-4741-8fdd-7852bb49b6fa",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1161),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1162),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "28815cef-bc4c-4797-b46c-acc22d268b7c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1164),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1167),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e1daad96-aae8-4687-9c3b-4f49a276f3f9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1168),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1170),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "71ed7dd7-3047-4a3b-9b4d-6a6d691c0908",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1171),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1172),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "e7be9c2e-c2e6-4e68-ba55-32be179c9a81",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1174),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1175),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "51a28100-7a86-4c5b-a405-a60265ae969a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1176),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1179),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e809ffa4-2aea-4349-a213-b31c77b6d0d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1180),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1182),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "82381da1-b9dd-4fe5-a581-6f0758422532",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1183),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1184),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e1512622-4661-484c-b40f-328578cd04bc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1185),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1187),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "11c30853-93c8-4475-a83e-b7a87c84fb3f",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1188),
                            Hall = "Alpha",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1191),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "64d0903f-646f-48c3-9b7a-cd9071084920",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1193),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1194),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "7ad1a82c-6234-44e4-8e31-21635dcd43c1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1195),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1197),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "54e9339f-a427-46d4-a952-185376edc10b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1198),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1199),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "03024ed9-42da-4c93-b564-13396b26ebb4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1202),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1205),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "e42c9850-d94f-442f-9fb1-e52cddd9d4cc",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1207),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1208),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "1765b23a-f5f6-48f7-acdb-bb7263218f55",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1209),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1210),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "8c6120d3-bf6c-4aaf-92b3-b9f018e6e53e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1212),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1213),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "4abf6ad7-a939-41d7-9d82-33d87cbac8d3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1214),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1225),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "aa32cc63-fee9-4881-8166-175ca1240346",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1226),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1228),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "5084128f-2805-402a-b725-601632cb6b2b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1229),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1230),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "86166cc8-6429-41e2-8cee-bec3ba932168",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1232),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1233),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "b4260ebb-c03b-4532-9c16-1fa1b5aa0036",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1234),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1237),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e6d8d633-a19c-4007-b69b-cbcec36d0736",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1239),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1240),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "56c38450-d016-4db9-9048-3303b697c563",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1241),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1243),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "ddaa41c6-5f7c-41d8-adb1-e2d683ff5847",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1244),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1245),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "9291ad6f-0a88-4aec-b74b-6f1de5db9173",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1247),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1250),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e232c199-971f-4bef-a003-e917186a1357",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1251),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1252),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "556bb5a0-cb3b-4f80-bfca-d25115e5a75b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1254),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1255),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "6b102806-73a9-4dfc-a05c-bec8ddf94169",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1256),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1258),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "dffbabc9-f270-446e-9a2a-d691db502c05",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1259),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1262),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d94ae281-f1c8-4caf-bc17-e66241c0c1c2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1263),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1264),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "cf99eb85-569c-42d9-9b60-9bdeb37dc9c3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1266),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1267),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "74e59411-00c7-4b6f-a6f0-9353ab7848b2",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1268),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1270),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "44388f75-46fd-4a0f-ab22-e84375d677d6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1271),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1274),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "d3e17bd7-b7f1-4f0d-a150-e0e9e2500f51",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1275),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1277),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "3f31959a-9e0c-4268-9162-41ae4c1589d1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1278),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1279),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "5b21047a-0577-414b-8336-d0c343c35ddd",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1281),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1282),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "2f1cbcea-6c3d-4b30-ad35-94f6062e02c4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1283),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1286),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "3abc2c8e-3075-41ca-8173-f4cb1e11d9fb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1287),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1289),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "c0175b2a-97c8-45e1-9683-7f841fa676c0",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1290),
                            Hall = "Beta",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1291),
                            Number = 6,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "29208a0e-5a2d-46b9-bb0a-26ad3404b5d9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1293),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1294),
                            Number = 1,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "a338b3db-c557-492b-96c4-0b44b9520ef9",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1295),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1298),
                            Number = 2,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "ab0685b9-d034-442a-8796-e1f48fe5f09e",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1299),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1301),
                            Number = 3,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "2a010602-0841-4d90-9bf0-d541cea20109",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1302),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1303),
                            Number = 4,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "fa6f8b16-3b98-4ad2-b8fd-e37e89342d91",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1311),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1312),
                            Number = 5,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "42f209a1-fd02-486a-8351-42617fcb871d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1315),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1318),
                            Number = 6,
                            Row = "A"
                        },
                        new
                        {
                            SeatID = "09a4975d-43b5-41b4-9ed5-4e4507507db4",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1320),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1321),
                            Number = 1,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "41b4fa99-d017-442d-8c14-5a63b5320440",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1322),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1323),
                            Number = 2,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "266451a8-b98a-4793-b2bc-f2446d67fdbb",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1325),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1326),
                            Number = 3,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "e947290d-f984-42f6-a222-78d9f4206d76",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1327),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1330),
                            Number = 4,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "51475f36-2c47-4c17-995b-cf3c8728d98d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1332),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1333),
                            Number = 5,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "306cf73d-8224-4600-9d61-faee6decff5b",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1334),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1335),
                            Number = 6,
                            Row = "B"
                        },
                        new
                        {
                            SeatID = "ccfff026-c758-4534-a642-cf293c75f9b3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1337),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1338),
                            Number = 1,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5cc47419-3986-4422-945a-66b816a95897",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1340),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1343),
                            Number = 2,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "36022bde-23c2-49e6-a819-743bc2af7ac3",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1344),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1345),
                            Number = 3,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "4c41a1ad-a437-4256-b05c-c43cec29d7b8",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1347),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1348),
                            Number = 4,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "e25cc4de-6ea4-4a7b-9124-b91582efa63c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1349),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1351),
                            Number = 5,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "5923d251-2ce3-4cd0-8b5b-ec143facef9a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1352),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1355),
                            Number = 6,
                            Row = "C"
                        },
                        new
                        {
                            SeatID = "91e60720-5069-4a15-8261-d6cd6e6c6b91",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1357),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1358),
                            Number = 1,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "23cb00df-e2ef-4a2e-a940-758743f10cf6",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1360),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1361),
                            Number = 2,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "513c74e7-c9b3-46c3-a0a8-f3aff8a2a0c1",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1362),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1364),
                            Number = 3,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3f9adb96-7e24-40d4-901f-570c6363e984",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1365),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1368),
                            Number = 4,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "3da6683f-393a-4422-a680-8475bc068322",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1369),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1370),
                            Number = 5,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "6bbba191-b7c0-44a8-9f77-93a475952827",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1372),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1373),
                            Number = 6,
                            Row = "D"
                        },
                        new
                        {
                            SeatID = "a810b07e-ade3-4ab3-ae63-63209bb9d63c",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1374),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1376),
                            Number = 1,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "1d135ec8-704f-401a-b820-6e4dd45843c7",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1377),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1380),
                            Number = 2,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "daa69dc3-66a4-4a5d-ba24-752281698881",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1381),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1392),
                            Number = 3,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "e97f8815-3089-44ad-a5d3-3d6fe8f4419a",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1393),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1395),
                            Number = 4,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "60c3b85a-4cf4-40a9-9e24-91e080383749",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1396),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1397),
                            Number = 5,
                            Row = "E"
                        },
                        new
                        {
                            SeatID = "41cfbc20-d3c2-4590-8cba-ff89b9e4dc9d",
                            CreatedBy = "System",
                            CreatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1399),
                            Hall = "Ceasar",
                            IsAvailable = true,
                            LastUpdatedBy = "System",
                            LastUpdatedTime = new DateTime(2024, 7, 6, 11, 0, 54, 470, DateTimeKind.Local).AddTicks(1402),
                            Number = 6,
                            Row = "E"
                        });
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeatID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("SeatID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEvents", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEventHistory", b =>
                {
                    b.Property<string>("UserEventHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEventID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEventHistoryID");

                    b.ToTable("UserEventHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserHistory", b =>
                {
                    b.Property<string>("UserHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHistoryID");

                    b.ToTable("UserHistories", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoucherID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Vouchers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("EventGate.Data.Entities.ChatReceiver", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Chat", "Chat")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("EventGate.Data.Entities.UserChatRoom", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("ChatRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Blog", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Blogs")
                        .HasForeignKey("EventID");

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.HasOne("EventGate.Data.Entity.ChatRoom", "ChatRoom")
                        .WithMany("Chats")
                        .HasForeignKey("ChatRoomID");

                    b.HasOne("EventGate.Data.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "President")
                        .WithMany()
                        .HasForeignKey("PresidentID");

                    b.Navigation("President");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventClub", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Club", "Club")
                        .WithMany("EventClubs")
                        .HasForeignKey("ClubID");

                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventClubs")
                        .HasForeignKey("EventID");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventFeedback", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("EventFeedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventHistory", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EventGate.Data.Entity.EventType", null)
                        .WithMany("EventHistories")
                        .HasForeignKey("EventTypeID1");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventRule", b =>
                {
                    b.HasOne("EventGate.Data.Entity.EventType", "EventType")
                        .WithMany("EventRules")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("EventGate.Data.Entity.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("EventGate.Data.Entity.PaymentsInfo", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithOne("PaymentsInfo")
                        .HasForeignKey("EventGate.Data.Entity.PaymentsInfo", "EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Point", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID");

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventGate.Data.Entity.UserEvent", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserID");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Voucher", b =>
                {
                    b.HasOne("EventGate.Data.Entity.Event", "Event")
                        .WithMany("Vouchers")
                        .HasForeignKey("EventID");

                    b.HasOne("EventGate.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventGate.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventGate.Data.Entity.Chat", b =>
                {
                    b.Navigation("ChatReceivers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.ChatRoom", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Club", b =>
                {
                    b.Navigation("EventClubs");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Event", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventClubs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("PaymentsInfo");

                    b.Navigation("Tickets");

                    b.Navigation("UserEvents");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("EventGate.Data.Entity.EventType", b =>
                {
                    b.Navigation("EventHistories");

                    b.Navigation("EventRules");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventGate.Data.Entity.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("EventFeedbacks");

                    b.Navigation("Orders");

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
